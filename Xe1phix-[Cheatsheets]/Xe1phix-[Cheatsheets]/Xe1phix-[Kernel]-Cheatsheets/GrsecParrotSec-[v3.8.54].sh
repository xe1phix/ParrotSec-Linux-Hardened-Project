#!/bin/sh

echo "-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"
echo "				[?] Hi My Name is Xe1phix - This Tutorials topic: "
echo "							[+] The Linux Kernel [+] 							 "
echo "-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"
echo "				 Building From Source & Manaul Kernel Compilation" 								
echo "								Tutorial Will Cover: 							 "

echo "## ------------------------------------------------------------------------- ##"
echo "						> Manually Compiling Kernel Source "					"
echo "## ------------------------------------------------------------------------- ##"

echo "## ------------------------------------------------------------------------- ##"
echo "						> Hardening Your Kernel With:"							"
echo "## ------------------------------------------------------------------------- ##"
echo "							- Grsecurity Patch									"
echo "							- Pax on ParrotSec Linux							"









## ================================================================================== ##


export SRC_DIR=/usr/src/
export IPTABLES_DIR=/sbin/iptables




## ================================================================================== ##
echo "Generate a GPG key with 4096 bits"
## ================================================================================== ##
gpg2 --full-gen-key --enable-large-rsa



echo "## ---------------------------------------------------------------------------------- ##"
echo "	 Please select what kind of key you want:"
echo "	    (1) RSA and RSA (default)"
echo "## ---------------------------------------------------------------------------------- ##"
echo "	 What keysize do you want? (2048) 4096"
echo "	 Key is valid for? (0) 6m"
echo "## ---------------------------------------------------------------------------------- ##"
echo "	 Real name: xe1phix"
echo "	 Email address: xe1phix@mail.i2p"
echo "	 Comment: From Nothing To Being There Is No Logical Bridge"
echo "	 Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? o"
echo "## ---------------------------------------------------------------------------------- ##"



## ================================================================================== ##
echo "Harden the gpg.conf file"
echo "Riseup.net's gpg.conf file is a good reference:"
## ================================================================================== ##
wget https://raw.githubusercontent.com/ioerror/duraconf/master/configs/gnupg/gpg.conf
echo gpg.conf > ~/.gnupg/gpg.conf


## ================================================================================== ##
echo "or use my Gnupg Configurations:"
## ================================================================================== ##
cat /home/xe1phix/infosectalk-Brown/GnuPG-CryptoPartyWorkshop/GPG-ConfigBestPractices.sh > ~/.gnupg/gpg.conf
cat /home/xe1phix/infosectalk-Brown/GnuPG-CryptoPartyWorkshop/dirmngr.conf > ~/.gnupg/dirmngr.conf





## 	    /\													  /\
## ====/==\==================================================/==\===
##	 	||  ____                      _     ____              ||
## 		|| |  _ \ __ _ _ __ _ __ ___ | |_  / ___|  ___  ___   ||
## 		|| | |_) / _` | '__| '__/ _ \| __| \___ \ / _ \/ __|  ||
## 		|| |  __/ (_| | |  | | | (_) | |_   ___) |  __/ (__   ||
## 		|| |_|   \__,_|_|  |_|  \___/ \__| |____/ \___|\___|  ||
## 		|| ================================================== ||
##		||													  ||
##		\/													  \/



echo "## ============================================================================================================= ##"
echo "##-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-##"
echo "## ----------------------------------------- ParrotSec Repository ---------------------------------------------- ##"
echo "##-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-##"
echo "## ============================================================================================================= ##"

##
## --------------------------------------------------------------------------------------------- ##
## wget -qO - http://archive.parrotsec.org/parrot/misc/parrotsec.gpg | apt-key add -
## wget -qO - http://archive.parrotsec.org/parrot/misc/parrotsec.gpg > parrotsec.gpg
## --------------------------------------------------------------------------------------------- ##
## openssl x509 -in /usr/local/share/ca-certificates/frozenCA.crt -noout -text
## --------------------------------------------------------------------------------------------- ##


echo "## ============================================================================================================= ##"
echo "##-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-##"
echo "## 						>> Lorenzo Faletra (Palinuro)  <palinuro@parrotsec.org>"
echo "##-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-##"
echo "## ============================================================================================================= ##"


echo "## =================================================================================== ##"
echo "## 			Fetch Lorenzo Faletra (Palinuro's) GPG Signing Key:"
echo "## =================================================================================== ##"
gpg --keyserver hkps://pool.sks-keyservers.net --recv-keys 0xB35050593C2F765640E6DDDB97CAA129F4C6B9A4


echo "## =================================================================================== ##"
echo "## 			Lorenzo Faletra (Palinuro's) GPG Fingerprint (Verified):"
echo "## =================================================================================== ##"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "##       Key fingerprint = B350 5059 3C2F 7656 40E6  DDDB 97CA A129 F4C6 B9A4"
echo "## ----------------------------------------------------------------------------------------------------------- ##"



echo "## =================================================================================== ##"
echo "## 			Concatenate Lorenzo Faletra (Palinuro's) GPG Fingerprint:"
echo "## =================================================================================== ##"
gpg --fingerprint 0xB35050593C2F765640E6DDDB97CAA129F4C6B9A4

echo "## =================================================================================== ##"
echo "## 			Sign Lorenzo Faletra (Palinuro) GPG Signing Key:"
echo "## =================================================================================== ##"
gpg --lsign 0xB35050593C2F765640E6DDDB97CAA129F4C6B9A4


echo "## =================================================================================== ##"
echo "## 			Export Lorenzo Faletra (Palinuro's) GPG Signing Key:"
echo "## =================================================================================== ##"
gpg --export B35050593C2F765640E6DDDB97CAA129F4C6B9A4 | sudo apt-key add -







echo "## ============================================================================================================= ##"
echo "##-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-##"
echo "## 						>> Frozenbox Network (Main Frozenbox Key) <info@frozenbox.org>						   ##"
echo "##-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-##"
echo "## ============================================================================================================= ##"


echo "## =================================================================================== ##"
echo "## 			Fetch Frozenbox Network (Main Frozenbox Key) GPG Signing Key:"
echo "## =================================================================================== ##"
gpg --keyserver x-hkp://pool.sks-keyservers.net --recv-keys 0xC07B79F43025772903D19385042FB0305F53BE86


echo "## =================================================================================== ##"
echo "## 		Frozenbox Network (Main Frozenbox Key) GPG Fingerprint (Verified):"
echo "## =================================================================================== ##"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "##       Key fingerprint = C07B 79F4 3025 7729 03D1  9385 042F B030 5F53 BE86"
echo "## ----------------------------------------------------------------------------------------------------------- ##"

echo "## =================================================================================== ##"
echo "## 		Concatenate Frozenbox Network (Main Frozenbox Key) GPG Fingerprint:"
echo "## =================================================================================== ##"
gpg --fingerprint 0xC07B79F43025772903D19385042FB0305F53BE86

echo "## =================================================================================== ##"
echo "## 			Sign Frozenbox Network (Main Frozenbox Key) GPG Signing Key:"
echo "## =================================================================================== ##"
gpg --lsign 0xC07B79F43025772903D19385042FB0305F53BE86


echo "## =================================================================================== ##"
echo "## 			Export Frozenbox Network (Main Frozenbox Key) GPG Signing Key:"
echo "## =================================================================================== ##"
gpg --export C07B79F43025772903D19385042FB0305F53BE86 | sudo apt-key add -





echo "## ============================================================================================================== ##"
echo "##-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-##"
echo "## 				>> Frozenbox Network (Repository Signature Only) <info@frozenbox.org>							##"
echo "##-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-##"
echo "## ============================================================================================================== ##"


echo "## =================================================================================== ##"
echo "## 		Fetch Frozenbox Network (Repository Signature Only) GPG Signing Key:"
echo "## =================================================================================== ##"
gpg --keyserver pool.sks-keyservers.net --recv-keys 0xC686553B9795FA72214DE39CD7427F070F4FC7A6


echo "## =================================================================================== ##"
echo "## 	Frozenbox Network (Repository Signature Only) GPG Fingerprint (Verified):"
echo "## =================================================================================== ##"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "##        Key fingerprint = C686 553B 9795 FA72 214D  E39C D742 7F07 0F4F C7A6"
echo "## ----------------------------------------------------------------------------------------------------------- ##"

echo "## =================================================================================== ##"
echo "## 	Concatenate Frozenbox Network (Repository Signature Only) GPG Fingerprint:"
echo "## =================================================================================== ##"
gpg --fingerprint 0xC686553B9795FA72214DE39CD7427F070F4FC7A6

echo "## =================================================================================== ##"
echo "## 		Sign Frozenbox Network (Repository Signature Only) GPG Signing Key:"
echo "## =================================================================================== ##"
gpg --lsign 0xC686553B9795FA72214DE39CD7427F070F4FC7A6


echo "## =================================================================================== ##"
echo "## 		Export Frozenbox Network (Repository Signature Only) GPG Signing Key:"
echo "## =================================================================================== ##"
gpg --export C686553B9795FA72214DE39CD7427F070F4FC7A6 | sudo apt-key add -







echo "## ============================================================================================================= ##"
echo "##-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-##"
echo "## 				>> Greg Kroah-Hartman (Linux Kernel Stable Release Signing Key) <greg@kroah.com>"
echo "##                                 (Linus no longer signs kernel releases)"
echo "##-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-##"
echo "## ============================================================================================================= ##"


echo "## =================================================================================== ##"
echo "## 		Fetch Greg Kroah-Hartman (Linux Kernel Stable Release Signing Key):"
echo "## =================================================================================== ##"
gpg --keyserver hkps://pool.sks-keyservers.net --recv-keys 0x647F28654894E3BD457199BE38DBBDC86092693E
gpg --keyserver hkp://keys.gnupg.net --recv-keys 0x647F28654894E3BD457199BE38DBBDC86092693E


echo "## =========================================================================================== ##"
echo "## Greg Kroah-Hartman (Linux Kernel Stable Release Signing Key) GPG Fingerprint (Verified):"
echo "## =========================================================================================== ##"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "##       Key fingerprint = 647F 2865 4894 E3BD 4571  99BE 38DB BDC8 6092 693E									 ##"
echo "## ----------------------------------------------------------------------------------------------------------- ##"


echo "## =========================================================================================== ##"
echo "## Concatenate Greg Kroah-Hartman (Linux Kernel Stable Release Signing Key) GPG Fingerprint:"
echo "## =========================================================================================== ##"
gpg --fingerprint 0x647F28654894E3BD457199BE38DBBDC86092693E


echo "## =========================================================================================== ##"
echo "## 	Sign Greg Kroah-Hartman (Linux Kernel Stable Release Signing Key) GPG Signing Key:"
echo "## =========================================================================================== ##"
gpg --lsign 0x647F28654894E3BD457199BE38DBBDC86092693E


echo "## =========================================================================================== ##"
echo "## 	Export Greg Kroah-Hartman (Linux Kernel Stable Release Signing Key):"
echo "## =========================================================================================== ##"
gpg --export 647F28654894E3BD457199BE38DBBDC86092693E | sudo apt-key add -



echo "## ################################################################################## ##"
echo "## ================================================================================== ##"
echo "				Alternative Way To Sign Greg Kroah-Hartmans GPG Key:"
echo "## ================================================================================== ##"
echo "## ################################################################################## ##"


echo "## ================================================================================== ##"
echo "			Edit Greg Kroah-Hartmans (Linux Kernel Stable Release Signing Key):"
echo "## ================================================================================== ##"
gpg --edit-key 0x38DBBDC86092693E



echo "## ================================================================================== ##"
echo "			Sign Greg Kroah-Hartmans (Linux Kernel Stable Release Signing Key):"
echo "## ================================================================================== ##"
echo "	 gpg> fpr"
echo "## ----------------------------------------------------------------------------------------------------------------------- ##"
echo "pub   rsa4096/38DBBDC86092693E 2011-09-23 Greg Kroah-Hartman (Linux kernel stable release signing key) <greg@kroah.com>"
echo " Primary key fingerprint: 647F 2865 4894 E3BD 4571  99BE 38DB BDC8 6092 693E"
echo "## ----------------------------------------------------------------------------------------------------------------------- ##"
echo "	 gpg> lsign"
echo "	 gpg> save"
echo "## ================================================================================== ##"






echo "## ============================================================================================================= ##"
echo "##-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-##"
echo "## 					>> Bradley Spengler (spender) <spender@grsecurity.net>"
echo "##-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-##"
echo "## ============================================================================================================= ##"




echo "## =================================================================================== ##"
echo "## 		Fetch Bradley Spengler (Grsecurity/Spender)'s GPG Signing Key:"
echo "## =================================================================================== ##"
gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys 0xDE9452CE46F42094907F108B44D1C0F82525FE49



echo "## ============================================================================================ ##"
echo "## 			 You Can Also Use Tor Onion Keyserver To Fetch  GPG Key:"
echo "## 			Configuring Tor Keyservers Wont Be Covered In This Tutorial"
echo "## 		but here is the Bradley Spenglers (spender) Grsecuritys.net .onion address:"
echo "## -------------------------------------------------------------------------------------------- ##"
echo "							hkp://jirk5u4osbsr34t5.onion"
echo "## -------------------------------------------------------------------------------------------- ##"
echo "## ============================================================================================ ##"



echo "## =================================================================================== ##"
echo "## 			Fetch GPG Key From Sks-Keyserver's Tor Onion Keyserver:"
echo "## =================================================================================== ##"
gpg ‐‐keyserver hkp://qdigse2yzvuglcix.onion ‐‐recv‐keys 0x38DBBDC86092693E


echo "## =================================================================================== ##"
echo "## 			Fetch GPG Key From Grsecurity's Tor Onion Keyserver:"
echo "## =================================================================================== ##"
gpg ‐‐keyserver hkp://jirk5u4osbsr34t5.onion ‐‐recv‐keys 0x94CBAFDD30345109561835AA0B7F8B60E3EDFAE3



echo "## =================================================================================== ##"
echo "## 		Import Bradley Spengler (Grsecurity/Spender)'s GPG Signing Key:"
echo "## =================================================================================== ##"
gpg --keyid-format 0xlong --import spender-gpg-key.asc


echo "## =================================================================================== ##"
echo "## 		Bradley Spengler (Grsecurity/Spender)'s GPG Fingerprint (Verified):"
echo "## =================================================================================== ##"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "##       Key fingerprint = DE94 52CE 46F4 2094 907F  108B 44D1 C0F8 2525 FE49"
echo "## ----------------------------------------------------------------------------------------------------------- ##"


echo "## =================================================================================== ##"
echo "## 		Concatenate Bradley Spengler (Grsecurity/Spender)'s GPG Fingerprint:"
echo "## =================================================================================== ##"
gpg --fingerprint 0xDE9452CE46F42094907F108B44D1C0F82525FE49


echo "## =================================================================================== ##"
echo "## 			Sign Bradley Spengler (Grsecurity/Spender)'s GPG Signing Key:"
echo "## =================================================================================== ##"
gpg --lsign 0xDE9452CE46F42094907F108B44D1C0F82525FE49


echo "## =================================================================================== ##"
echo "## 		Export Bradley Spengler (Grsecurity/Spender)'s GPG Signing Key:"
echo "## =================================================================================== ##"
gpg --export DE9452CE46F42094907F108B44D1C0F82525FE49 | sudo apt-key add -



echo "## ################################################################################## ##"
echo "## ================================================================================== ##"
echo "				Alternative Way To Sign Greg Kroah-Hartmans GPG Key:"
echo "## ================================================================================== ##"
echo "## ################################################################################## ##"



echo "## ================================================================================== ##"
echo "			Edit Bradley Spengler (Spender/Grsecurity)s GPG signing key:"
echo "## ================================================================================== ##"
gpg --edit-key 0x44D1C0F82525FE49




echo "## ============================================================================================================= ##"
echo "						Check & Sign Bradley Spengler (spender) Grsecurity GPG signing key:"
echo "## ============================================================================================================= ##"
echo "	  gpg> fpr"
echo "## ------------------------------------------------------------------------------------------------------------- ##"
echo "	  pub   rsa4096/44D1C0F82525FE49 2013-11-10 Bradley Spengler (spender) <spender@grsecurity.net>"
echo " 	   Primary key fingerprint: DE94 52CE 46F4 2094 907F  108B 44D1 C0F8 2525 FE49"
echo "## ------------------------------------------------------------------------------------------------------------- ##"
echo "	  gpg> lsign"
echo "	  gpg> save"
echo "## ============================================================================================================= ##"





echo "## ============================================================================================================= ##"
echo "##-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-##"
echo "## 					>> Sks-Keyserver.net (Kristian Fiskerstrand)  <kf@gnupg.net>"
echo "##-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-##"
echo "## ============================================================================================================= ##"


echo "## =========================================================================================== ##"
echo "		[?] When Fetching the needed GPG signing keys:"
echo "		I prefer using the sks-keyservers.net keyserver because:"
echo "## =========================================================================================== ##"
echo "## ------------------------------------------------------------------------------------------- ##"
echo "			1). Lookups are performed using pgpkey-https by the sks-keyservers.net CA"
echo "			2). The only port open on the sks-keyserver is port 443 (tls-ssl)" 
echo "## ------------------------------------------------------------------------------------------- ##"
echo "##			[?] https://sks-keyservers.net/overview-of-pools.php							 ##"
echo "## ------------------------------------------------------------------------------------------- ##"
echo "## =========================================================================================== ##"



echo "## =========================================================================================== ##"
echo "## 						Fetch The Sks-Keyserver GPG Signing Key:"
echo "## =========================================================================================== ##"
gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys 0x94CBAFDD30345109561835AA0B7F8B60E3EDFAE3



echo "## =========================================================================================== ##"
echo "## 					Fingerprint The Sks-Keyserver GPG Signing Key:"
echo "## =========================================================================================== ##"
gpg --fingerprint 0x94CBAFDD30345109561835AA0B7F8B60E3EDFAE3

echo "## =========================================================================================== ##"
echo "## 						Sks-Keyserver GPG Fingerprint (Verified):"
echo "## =========================================================================================== ##"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "##       Key fingerprint = 647F 2865 4894 E3BD 4571  99BE 38DB BDC8 6092 693E									 ##"
echo "## ----------------------------------------------------------------------------------------------------------- ##"



echo "## =========================================================================================== ##"
echo "## 					The Sks-Keyserver Fingerprint Is As Follows (Verified):"
echo "## =========================================================================================== ##"
echo "Primary key fingerprint: 94CB AFDD 3034 5109 5618  35AA 0B7F 8B60 E3ED FAE3"


echo "## =========================================================================================== ##"
echo "## 							Sign The Sks-Keyserver GPG Key:"
echo "## =========================================================================================== ##"
gpg --lsign 0x94CBAFDD30345109561835AA0B7F8B60E3EDFAE3


echo "## =========================================================================================== ##"
echo "## 						Export The Sks-Keyserver GPG Signing Key:"
echo "## =========================================================================================== ##"
gpg --export 94CBAFDD30345109561835AA0B7F8B60E3EDFAE3 | sudo apt-key add -



echo "## ================================================================================== ##"
echo "##					Use Curl To Grab The .pem & pem.asc Files:"
echo "##			Here is an in-depth overview if you are new to the subject:"
echo "## ---------------------------------------------------------------------------------- ##"
echo "##					https://riseup.net/en/gpg-best-practices"
echo "## ---------------------------------------------------------------------------------- ##"
echo "## ================================================================================== ##"
curl --verbose --progress-bar --tlsv1.2 --ssl-reqd --url https://sks-keyservers.net/ca/crl.pem --output /usr/share/gnupg/crl.pem
curl --verbose --progress-bar --tlsv1.2 --ssl-reqd --url https://sks-keyservers.net/sks-keyservers.netCA.pem --output /usr/share/gnupg/sks-keyservers.netCA.pem
curl --verbose --progress-bar --tlsv1.2 --ssl-reqd --url https://sks-keyservers.net/sks-keyservers.netCA.pem.asc --output /usr/share/gnupg/sks-keyservers.netCA.pem.asc


echo "## ================================================================================== ##"
echo "##			cd into the directory you placed the signed .pem in:"
echo "## ================================================================================== ##"
cd /usr/local/etc/ssl/certs/




echo "## =================================================================================== ##"
echo "## 		Verify The .pem Against The GnuPG Signed .asc File:"
echo "## =================================================================================== ##"
gpg --verify sks-keyservers.netCA.pem.asc sks-keyservers.netCA.pem



dirmngr --hkp-cacert /usr/share/gnupg/sks-keyservers.netCA.pem


echo "## ============================================================================================ ##"
echo "## 		 You Can Also Use Tor Onion Keyserver To Fetch  GPG Key:"
echo "## 		Configuring Tor Keyservers Wont Be Covered In This Tutorial"
echo "## 			but here is the sks-keyservers.net .onion address:"
echo "## -------------------------------------------------------------------------------------------- ##"
echo "							hkp://jirk5u4osbsr34t5.onion"
echo "## -------------------------------------------------------------------------------------------- ##"
echo "## ============================================================================================ ##"
gpg ‐‐keyserver hkp://jirk5u4osbsr34t5.onion ‐‐recv‐keys 0x94CBAFDD30345109561835AA0B7F8B60E3EDFAE3






echo "## ============================================================================================================= ##"
echo "##-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-##"
echo "## 						>> "
echo "##-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-##"
echo "## ============================================================================================================= ##"


echo "## =================================================================================== ##"
echo "## 			Fetch  GPG Signing Key:"
echo "## =================================================================================== ##"
gpg --keyserver hkps://pool.sks-keyservers.net --recv-keys 0x


echo "## =================================================================================== ##"
echo "## 			 GPG Fingerprint (Verified):"
echo "## =================================================================================== ##"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "##       Key fingerprint = "
echo "## ----------------------------------------------------------------------------------------------------------- ##"

echo "## =================================================================================== ##"
echo "## 			Concatenate  GPG Fingerprint:"
echo "## =================================================================================== ##"
gpg --fingerprint 0x

echo "## =================================================================================== ##"
echo "## 			Sign  GPG Signing Key:"
echo "## =================================================================================== ##"
gpg --lsign 0x


echo "## =================================================================================== ##"
echo "## 			Export  GPG Signing Key:"
echo "## =================================================================================== ##"
gpg --export  | sudo apt-key add -








## ================================================================================== ##
echo "make sure the parrot archive keyring is installed. it should be by default."
## ================================================================================== ##
apt-get update && apt-get install parrot-archive-keyring

wget -qO - http://archive.parrotsec.org/parrot/misc/parrotsec.gpg | apt-key add -


## ================================================================================== ##
echo "Is Curl Currently Installed?"
echo "If The Answer is no, install it."
## ================================================================================== ##
if [ -z `which curl` ]; then
	echo "==> Installing curl ..."
	apt-get -y -qq install curl &> /dev/null
	if [ $? -eq 0 ]; then echo "OK"; else echo "Failed"; exit 1; fi
fi


function scurl {
	curl --verbose --ssl-reqd --tlsv1.3 --progress-bar --proto=https $1
}


## ================================================================================== ##
echo "Grap the linux kernel over tls, output to /usr/src"
## ================================================================================== ##
curl --verbose --ssl-reqd --tlsv1.3 --progress-bar --url https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.9.13.tar.xz --output /usr/src/linux-4.9.13.tar.xz
curl --verbose --ssl-reqd --tlsv1.3 --progress-bar --url https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.9.13.tar.xz.sign --output /usr/src/linux-4.9.13.tar.xz.sign

echo "or"

## ================================================================================== ##
echo "Grab the linux kernel with wget"
## ================================================================================== ##
wget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.9.13.tar.xz
wget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.9.13.tar.xz.sign











curl -o i2p-debian-repo-key.asc -3 --tlsv1.2 --verbose https://geti2p.net/_static/i2p-debian-repo.key.asc











http-proxy=socks4a://127.0.0.1:59050
curl --socks5 127.0.0.1:9150

echo "## ========================================================================================== ##"
echo "		To Anonymize GPG Key Fetches With Tors Socks5 Proxy Add This to Your gpg.conf File:"
echo "## ========================================================================================== ##"
keyserver-options http-proxy=socks5-hostname://127.0.0.1:9050

echo "## ========================================================================================== ##"
echo "		To Anonymize GPG Key Fetches With I2P HTTP/S Proxy Add This to Your gpg.conf File:"
echo "## ========================================================================================== ##"
keyserver-options http-proxy=http-hostname://127.0.0.1:4444

echo "## ================================================================================== ##"
echo "## 		Send Your Public Keys To The hkp://cryptonomicon.mit.edu keyserver
echo "## ================================================================================== ##"
gpg --keyserver hkp://18.9.60.141 --keyserver-options "$keyservopts" --send-keys $@


echo "## ================================================================================== ##"
echo "						To Fetch Files With Curl, such as:"
echo "## ================================================================================== ##"
echo
echo "## +~+~+~+~+~+~+~+~~+~+~+~+~~+~+~+~+~+ ##"
echo "1). GPG Keys From i2p eepsites"
echo "2). Keyrings From i2p eepsites"
echo "2). Binary Files From i2ps Most Distinguished" 
echo "	  Developer (KillYourTV). Operates His Own "
echo "    Debian Repo eepsite:"
echo "    killyourtv.i2p"
echo "## +~+~+~+~+~+~+~+~~+~+~+~+~~+~+~+~+~+ ##"
echo
echo "## ---------------------------------------------------------------------------------- ##"
echo "			KillYourTV Also Utilizes The Dropbox Platform As A Binary" 
echo "				Repository Which Encapsulates Apt-transport Through"  
echo "				https To Add Another Layer of Authentication (TLS)"
echo "## ---------------------------------------------------------------------------------- ##"



## ========================================================================== ##
echo "Use I2P Proxy To Fetch KillYourTVs Pub GPG Key From His eepsite:"
## ========================================================================== ##
curl --resolve 127.0.0.1:4444:http://killyourtv.i2p/killyourtv.asc


## =================================================================================== ##
echo "Use curl To Fetch I2Ps Main Pub GPG Key From KYTVs Debian Dropbox Repository:"
## =================================================================================== ##
curl --tlsv1.2 --url https://dl.dropboxusercontent.com/u/18621288/debian/pool/main/i/i2p-keyring/i2p-keyring_2014.09.25_all.deb --output ~/Gnupg/i2p-keyring_2014.09.25_all.deb


## ========================================================================== ##
echo "KillYourTVs Dropbox Debian Repo URL is:"
## ========================================================================== ##
echo "deb https://dl.dropboxusercontent.com/u/18621288/debian/ wheezy main"


## ========================== ##
echo "The I2P Homepage is:"
## ========================== ##
http://127.0.0.1:7657/home







#!/bin/sh

function fpr {
	gpg --fingerprint $i | grep fingerprint
}















gpg --export  | sudo apt-key add -
gpg --keyserver pool.sks-keyservers.net --send-keys 0x


gpg --keyid-format long --import


## ================================================================================================= ##
## _________________________________________________________________________________________________ ##
# deb http://mirrors.kernel.org/debian/ stable main
# deb-src http://mirrors.kernel.org/debian/ stable main

# deb http://mirrors.kernel.org/debian/ unstable main
# deb-src http://mirrors.kernel.org/debian/ unstable main


## #############################################################################
## ========================================================================== ##
## #############################################################################
# deb http://www.grsecurity.net/debian/ stable main
# deb http://www.grsecurity.net/debian/ testing main
# deb http://www.grsecurity.net/debian/ unstable main







hardening-check --verbose --color --debug
hardening-check --report-functions


hardening-check -fstack-protector		## When an executable was built without any character arrays being allocated on the stack

hardening-wrapper














getent ahosts; getent  ahostsv4; getent  ahostsv6; getent  aliases; getent  ethers; getent  group; getent  gshadow; getent  hosts; getent  initgroups; getent  netgroup; getent  networks; getent  passwd; getent  protocols; getent  rpc; getent  services; getent shadow



## ================================================================================== ##
echo "Set User home directory environment variable:"
echo "open a user terminal, and type:"
## ================================================================================== ##
export HOME=/home/$USER


## ================================================================================== ##
echo "Make a grsec directory inside the user directory"
## ================================================================================== ##
mkdir $HOME/Grsec; cd $HOME/Grsec

## ================================================================================== ##
echo "Fetch Spenders GPG Key with curl:"
## ================================================================================== ##
curl -O https://grsecurity.net/spender-gpg-key.asc

## ================================================================================== ##
echo "import Bradley Spengler (spender) Grsecurity GPG signing key:"
## ================================================================================== ##
gpg --keyid-format long --import spender-gpg-key.asc
 && gpg --fingerprint 2EEACCDA | grep fingerprint

## ================================================================================== ##
echo "Fetch the Grsecurity patches, Signatures, and Packages:"
## ================================================================================== ##


## ================================================================================== ##
echo "You can either use curl:"
## ================================================================================== ##
curl -O https://grsecurity.net/test/grsecurity-3.1-4.9.13-201702270729.patch
curl -O https://grsecurity.net/test/grsecurity-3.1-4.9.13-201702270729.patch.sig
curl -O https://grsecurity.net/stable/gradm-3.1-201701031918.tar.gz
curl -O https://grsecurity.net/stable/gradm-3.1-201701031918.tar.gz.sig
curl -O https://grsecurity.net/stable/grsecurity-2.2.0-iptables.patch
curl -O https://grsecurity.net/stable/grsecurity-2.2.0-iptables.patch.sig
curl -O https://grsecurity.net/paxctld/paxctld_1.2.1-1_amd64.deb
curl -O https://grsecurity.net/paxctld/paxctld_1.2.1-1_amd64.deb.sig

## ================================================================================== ##
echo "or you can use wget to fetch the patches, archives, binaries, and signatures:"
## ================================================================================== ##
## --------------------------------------------------------------------------- ##
echo "(You will be verifying their integrity with spenders GPG key anyways):"
## --------------------------------------------------------------------------- ##
wget https://grsecurity.net/test/grsecurity-3.1-4.9.13-201702270729.{patch,patch.sig}
wget https://grsecurity.net/stable/grsecurity-2.2.0-iptables.{patch,patch.sig}
wget https://grsecurity.net/stable/gradm-3.1-201701031918.{tar.gz,tar.gz.sig}
wget https://grsecurity.net/paxctld/paxctld_1.2.1-1_amd64.{deb,deb.sig}



https://grsecurity.net/~spender/paxtest-0.9.15.tar.gz
https://grsecurity.net/~spender/paxtest-0.9.15.tar.gz.sig




https://grsecurity.net/~spender/nvidia-drivers-352.09-pax.patch
https://grsecurity.net/~spender/grsec_logspoof.diff


https://grsecurity.net/~spender/random_mac.diff


echo "Add random offset to TCP timestamps"

https://grsecurity.net/~spender/random_timestamp.diff




https://grsecurity.net/~spender/new_net_fix.diff
https://grsecurity.net/~spender/grsec_ipc_harden.diff





## ================================================================================== ##
echo "Verify all of the grsec files you downloaded:"
## ================================================================================== ##
gpg --keyid-format 0xlong --verify grsecurity-3.1-4.9.13-201702270729.patch.sig
gpg --keyid-format 0xlong --verify grsecurity-2.2.0-iptables.{patch.sig,patch}
gpg --keyid-format 0xlong --verify gradm-3.1-201701031918.tar.gz.sig
gpg --keyid-format 0xlong --verify paxctld_1.2.1-1_amd64.{deb.sig,deb}










echo "## ============================================================================================================= ##"
echo "##-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-##"
echo "## ------------------------ [!] Part 2 - Compiling A Hardened Kernel From Source [!] --------------------------- ##"
echo "##-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-##"
echo "## ============================================================================================================= ##"







#
# vmlinux
#   ^
#   |
#   +-< $(KBUILD_VMLINUX_INIT)
#   |   +--< init/version.o + more
#   |
#   +--< $(KBUILD_VMLINUX_MAIN)
#   |    +--< drivers/built-in.o mm/built-in.o + more
#   |
#   +-< ${kallsymso} (see description in KALLSYMS section)
#




echo "|| ============	||=======================================================||"
echo "|| [+] zImage		|| 		Kernel Binary File Is Stored In Low Memory		 ||" 
echo "|| ============	|| 				(The First 640kb of RAM)		 		 ||"
echo "|| 				||=======================================================||"


echo "|| ============	||======================================================================||"
echo "|| [+] bzImage 	|| 						(Stands For Big zImage) 						||"
echo "|| ============	|| 		Most Systems Permit Kernels To Be Loaded in High Memory			||"
echo "|| 				||						(about 1MB RAM barrier)							||"
echo "|| 				||----------------------------------------------------------------------||"
echo "|| 				|| [?] Most Modern Kernel Images Are Above 512kb (Even Compressed)		||"
echo "|| 				||----------------------------------------------------------------------||"
echo "|| 				||======================================================================||"



echo "|| =======================================================================||"
echo "|| zImage kernel image  --> Loaded Into Low Memory	|| Max 520 KB Limit ||"
echo "|| =======================================================================||"
echo "|| bzImage kernel image --> Loaded Into High Memory 	||  No Size Limit   ||"
echo "|| =======================================================================||"





echo "##-=====================================================-##"
echo "   [!] Kernel Binary Image Formats By Version Number"
echo "##-=====================================================-##"
echo "															 "
echo "## ----------------------------------------------------- ##"
echo "   ||		1.0-2.6.x		|| gzip prior versions	||"
echo "## ----------------------------------------------------- ##"
echo "	 ||     2.7.x			|| bzip2 since			||"
echo "## ----------------------------------------------------- ##"
echo "##-=====================================================-##"


Steps:


make mrproper
make menuconfig
make bzimage
make modules
make modules_install
make install














echo "## =================================================================================== ##"
echo "## 				Install The Depenedencies Needed To Compile							 ##"
echo "## =================================================================================== ##"




COMPILEDEPS="flex bison libncurses5-dev fakeroot gcc-6-plugin-dev libgmp-dev libmpfr-dev libmpc-dev libssl-dev build-essential gcc-${GCC_VERSION}-plugin-dev bc"

## ================================================================================== ##
echo "Download the prereq binaries:"
## ================================================================================== ##
apt-get update && apt-get install flex bison libncurses5-dev fakeroot gcc-6-plugin-dev libgmp-dev libmpfr-dev libmpc-dev libssl-dev build-essential









echo "## ================================================================================== ##"
echo " [!] install ncurses package if intended to configure kernel via "
echo "     		text-mode windowed environment (make menuconfig):"
echo "## ================================================================================== ##"
apt-get install libncurses5-dev

echo "## ---------------------------------- ##"
echo "##	For Redhat/Fedora/CentOS:		##"
echo "## ---------------------------------- ##"
yum install ncurses­devel




echo "## ================================================================================== ##"
echo " [!] install QT packages if intended to configure kernel via: "
echo "     		Qt-based GUI environment (make xconfig):"
echo "## ================================================================================== ##"

apt-get install pkg-config qt4-dev-tools qt4-qmake

echo "## ---------------------------------- ##"
echo "##	For Redhat/Fedora/CentOS:		##"
echo "## ---------------------------------- ##"
yum install qt3­devel libXi­devel




echo "## ================================================================================== ##"
echo " [!] install GTK+ development packages if intended to configure kernel via:"
echo "     				GTK-based GUI environment (make gconfig):"
echo "## ================================================================================== ##"
apt-get install libgtk2.0-dev libglib2.0-dev libglade2-dev

echo "## ---------------------------------- ##"
echo "##	For Redhat/Fedora/CentOS:		##"
echo "## ---------------------------------- ##"
yum install gtk2­devel libglade2­devel








apt-get build-dep linux

apt-get source linux



apt-get install ncurses-devel make gcc


echo "## ====================================================================== ##"
echo "   [+] Download The Prereq's For Redhat/Fedora/CentOS:"
echo "## ====================================================================== ##"
yum install ncurses-devel
yum groupinstall "Development Tools"

yum install ncurses-devel qt-devel hmaccalc zlib-devel binutils-devel elfutils-libelf-devel










## ================================================================================== ##
echo "Open a root terminal, or type su into the existing terminal"
## ================================================================================== ##
sudo su - 



## ================================================================================== ##
echo "Copy everything into /usr/src/ directory:"
## ================================================================================== ##
cp -v linux-4.9.13.tar /usr/src/
cp -v grsecurity-3.1-4.9.13-201702270729.patch /usr/src/
cp -v grsecurity-2.2.0-iptables.patch /usr/src/
cp -v gradm-3.1-201701031918.tar.gz /usr/src/



echo "## ========================================================= ##"
echo "   [+] uncompressing the archive (using unxz)"
echo "## ========================================================= ##"
unxz linux-4.6.6.tar.xz


echo "## ====================================================================== ##"
echo "   [+] Verify The Kernel Source Against Greg Kroah-Hartmans GPG Key:"
echo "## ====================================================================== ##"
gpg2 --verify linux-4.6.6.tar.sign



echo "## ========================================================= ##"
echo "   [+] Uncompressing the archive, using unxz. Then, "
echo "	     Verify the .tar archive against the signature:"
echo "## ========================================================= ##"
xz -cd linux-4.9.13.tar.xz | gpg2 --verify linux-4.9.13.tar.sign -
xz -cd linux-4.9.*.tar.xz | gpg --verify linux-4.9.*.tar.sign -









echo "## =================================== ##"
echo "   [+] Extract the kernel archive:"
echo "## =================================== ##"
tar -xf linux-4.9.13.tar


echo "## =================================== ##"
echo "   [+] cd into the kernel folder:			"
echo "## =================================== ##"
cd linux-4.9.13




echo "## ================================================================ ##"
echo "    [+] Backup The Original Kernel .config Just In Case: 				"
echo "## ================================================================ ##"
cp .config /home/xe1phix/linux-Kernel-orig.config

















sudo apt-get update && sudo apt-get build-dep gcc-7



mkdir /usr/src/linux/




echo "## ===================================================================== ##"
echo "		[+] Link The ${KernelVersion} To The /usr/src/linux Directory:"
echo "## ===================================================================== ##"
ln /usr/src/${KernelVersion} /usr/src/linux



echo "## ===================================================================== ##"
echo "		[+] Link The linux-4.9.24 To The /usr/src/linux Directory:"
echo "## ===================================================================== ##"
ln /usr/src/linux-4.9.24 /usr/src/linux

echo "## ===================================================================== ##"
echo "		[+] Rename The linux-4.9.24 Kernel To linux-4.9.24-grsec"
echo "## ===================================================================== ##"
mv /usr/src/linux-4.9.24 /usr/src/linux-4.9.24-grsec


echo "## ===================================================================== ##"
echo "		[+] Link The linux-4.9.24-grsec To The /usr/src/linux Directory:"
echo "## ===================================================================== ##"
ln /usr/src/linux-4.9.24-grsec /usr/src/linux



cd /usr/src/linux




## ======================================================== ##
echo "[+] Patch the Kernel with Grsecurity"
## ======================================================== ##
patch -p1 < ../grsecurity-3.1-4.9.13-201702270729.patch 






## ========================================================================= ##
echo "[+] Make sure you have all the PaX utilities installed:"
## ========================================================================= ##
apt-get update && apt-get install paxrat paxtest pax-utils paxctl paxctld


echo "## =========================================================================================================== ##"
echo "## 											Make targets													 ##"
echo "## =========================================================================================================== ##"


echo "## =========================================================================================================== ##"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "	 [+] make xconfig					|| X Window QT graphical libraries Interface						||"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "	 [+] make gconfig					|| Gnome Desktop & GTK+ libraries Interface 						||"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "	 [+] make config					|| Terminal-based User Interface									||"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "	 [+] make menuconfig				|| NCurses User Interface											||"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "## =========================================================================================================== ##"



echo "## =========================================================================================================== ##"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "	 [+] make oldconfig					|| Create a new config file, based on the options in the old config	||"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "	 [+] make bzImage					|| Compile && Create BZip2 Compressed Kernel Binary					||"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "	 [+] make modules					|| Create the module object library files using the modules target	||"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "	 [+] make zImage					|| Compile && Create GZip Compressed Kernel Binary					||"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "	 [+] make -j2 all					|| speed up compilation by allocating 2 simultaneous compile jobs	||"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "	 [+] make modules_install			|| Install the previously built modules present in /lib/modules/	||"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "	 [+] make install					|| Install the kernel automatically									||"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "	 [+] make silentoldconfig			|| Similar to oldconfig but reduces screen clutter					||"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "	 [+] make allmodconfig				|| Creates a configuration file that uses 							||"
echo "	 ################################## || modular configuration as much as possible						||"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "	 [+] localmodconfig					|| Update current config disabling modules not loaded"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "	 [+] localyesconfig					|| Update current config converting local mods to core"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "## =========================================================================================================== ##"




	



echo "## ============================================================ ##"
echo "    		[•] 2.6.x kernel source code Installation				"
echo "## ------------------------------------------------------------ ##"
echo "	  [!] This Installs To: /usr/src/kernels/[kernel version]		"
echo "## ------------------------------------------------------------ ##"
echo "## ============================================================ ##"
yum install kernel-devel



echo "## ============================= ##"

echo "## ============================= ##"



echo "## ============================================================ ##"
echo "    		[•] 2.6.x Kernel Documentation Installation 			"
echo "## ============================================================ ##"
echo "	 				 [!] This Installs To: 							"
echo "## ------------------------------------------------------------ ##"
echo "	 [?] /usr/share/doc/kernel-doc-[kernel verion]/Documentation	"
echo "## ------------------------------------------------------------ ##"
echo "## ============================================================ ##"
yum install kernel-doc



echo "## ============================================================ ##"
echo "    		[•] 3.x Kernel Source Code Installation				"
echo "## ------------------------------------------------------------ ##"
echo "	  [!] This Installs To: /usr/src/linux-[kernel version]		"
echo "## ------------------------------------------------------------ ##"
echo "## ============================================================ ##"
apt-get source linux-image-$(uname -r)




echo "## ============================================================ ##"
echo "    			[•] 3.x Kernel Documentation Installation			"
echo "## ============================================================ ##"
echo "	 				 [!] This Installs To: 							"
echo "## ------------------------------------------------------------ ##"
echo "	 			[?] /usr/src/linux-[kernel version]					"
echo "## ------------------------------------------------------------ ##"
echo "## ============================================================ ##"




echo "## =============================================== ##"
echo "	 [+] Create The Kernel Configuration File:"
echo "## =============================================== ##"
make menuconfig








echo "## =========================================================================================================== ##"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "	 [+] clean 					• Delete most generated files while leaving enough to build modules"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "	 [+] mrproper 				• Delete the current configuration and ALL generated files"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "	 [+] distclean 				• Remove everything including backup files, leftover patch files, etc."
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "## =========================================================================================================== ##"



make clean


echo "## ===================================================================== ##"
echo "   [+] Create An Uncompressed Kernel Binary File:"
echo "## ===================================================================== ##"
make


echo "## ===================================================================== ##"
echo "   [+] Create A Compressed Kernel Binary File && Compile The Kernel:"
echo "## ===================================================================== ##"
make bzImage


echo "## ========================================================================== ##"
echo " 		[+] CC Lines		|| Indicate Object Code files that are being created"
echo "## ========================================================================== ##"
echo " 		[+] LD Lines		|| indicate Object Code files that are being linked "
echo " 							|| to create executable files"
echo "## ========================================================================== ##"









echo "## ===================================================================== ##"
echo "			[+] Kernel Binary File Compressed with GNU Zip"
echo "## ===================================================================== ##"



echo "## ===================================================================== ##"
echo "			[+] Examine The Kernel Binary File Type:"
echo "## ----------------------------------------------------------------------------------------- ##"
echo "    https://www.lisenet.com/2013/compile-and-install-linux-kernel-3-12-5-on-debian-wheezy/"
echo "## ----------------------------------------------------------------------------------------- ##"
echo "## ===================================================================== ##"
file -b /usr/src/linux-3.12.5/arch/x86/boot/bzImage



echo "## ===================================================================== ##"
echo "			[+] Manually Install the Kernel Binary File With CP"
echo "## ===================================================================== ##"
cp /usr/src/linux/arch/x86/boot/bzImage /boot/vmlinuz-4.9.24

cp /usr/src/linux/arch/x86/boot/bzImage /boot/vmlinuz-4.13.4



echo "## ===================================================================== ##"
echo "   [+] System.map || contains pointers to functions in the kernel  ||"
echo "    	    		|| and is used for debugging kernel problems.    ||"
echo "## ===================================================================== ##"

cp /usr/src/linux/System.map /boot/System.map-4.9.24

cp /usr/src/linux/System.map /boot/System.map-4.13.4



echo "## ===================================================================== ##"
echo "   [+] System.map || contains pointers to functions inside the kernel  ||"
echo "    	    		|| and is used for debugging kernel problems. 		 ||"
echo "## ===================================================================== ##"



cp /usr/src/linux/arch/x86/boot/config-* /boot





echo "## ===================================================================== ##"
echo "  		[+] make install - serves as a shortcut:					"
echo "## ===================================================================== ##"
echo "## -------------------------------------------------------- ##"
echo "    > copying the kernel file									"
echo "    > the System.map 											"
echo "    > the config files										"
echo "## -------------------------------------------------------- ##"
echo " [?] And often (but not always) 								"
echo "## -------------------------------------------------------- ##"
echo "   > creating an initial RAM disk 							"
echo "   > And modifying the GRUB config forthe new kernel			"
echo "## -------------------------------------------------------- ##"
echo "## ===================================================================== ##"
make install




echo "## ===================================================================== ##"
echo "		[+] Probe all modules in the kernel modules directory  "
echo "			Then generate the file that lists their dependencies"
echo "## ===================================================================== ##"

depmod -a		

depmod 4.9.24

headers_install

make all

checkstack




echo "## ===================================================================== ##"
echo "				[+] Create the module object library "
echo "     				(by using the modules target):"
echo "## ===================================================================== ##"

make modules


echo "## ================================================================================== ##"
echo "  	[+] make modules_install - installs kernel modules under /lib/modules/"
echo "## ================================================================================== ##"

make modules_install 



echo "## ===================================================================== ##"
echo "    		[?] You can, however install both in parrellel:"
echo "## ===================================================================== ##"

make modules_install install





echo "## ================================================ ##"
echo "   [+] Copy The Current Kernel Configurations"
echo "## ================================================ ##"
cp /boot/config-* /usr/src/linux/.config

cat /lib/modules/$(uname -r)/build/.config




## =================================================== ##
echo "+--\ copy your current existing kernel /-----+ ##" 
echo "+---\\ config to this build location //------+ ##"
## =================================================== ##
cp /usr/lib/modules/`uname -r`/build/.config ./
cp /usr/lib/modules/`uname -r`/build/Module.symvers ./



echo "## ================================================ ##"
echo "   [+] Page Through The Current Source Config File"
echo "## ================================================ ##"
cat /usr/src/.config | less



echo "## ================================================ ##"
echo "   [+] Search For Specific Kernel Parameters"
echo "## ================================================ ##"
cat /usr/src/.config | grep




echo "## ===================================================================== ##"
echo "   [+] Generate The Inital RAM Disk Image File:"
echo "## ===================================================================== ##"
mkinitrd /boot/initrd.img-4.9.24-grsec 4.9.24-grsec



echo "## ===================================================================== ##"
echo " [+] Create the initramfs file (which calls the "dracut" utility):"
echo "## ===================================================================== ##"

mkinitrd /boot/initramfs-4.9.24-grsec.img 4.9.24-grsec			## mkinitrd /boot/initramfs-[kernel version].[architecture].img [kernel version]


echo "## ===================================================================== ##"
echo "   [+] Create an initramfs of the current running kernel:"
echo "## ===================================================================== ##"
mkinitramfs -o ~/tmp/initramfs-$(uname -r)

echo "## ===================================================================== ##"
echo "   [+] Create an initramfs of the 4.9.24-grsec kernel:"
echo "## ===================================================================== ##"
mkinitramfs -o /boot/initramfs-4.9.24-grsec.img 4.9.24-grsec


echo "## ===================================================================== ##"
echo "   [+] Create an initramfs of the 4.9.0-parrot25-amd64 kernel:"
echo "## ===================================================================== ##"
mkinitramfs -o /boot/initramfs-4.9.0-parrot25-amd64.x86_64.img 4.9.0-parrot25


dracut can generate a new initramfs image 


modprobe -ni --show-depends -S ${kversion} ${mod}


## List initramfs content of current running kernel:
lsinitramfs -l /boot/initrd.img-3.16.7-parrot-amd64 > /home/poozer/lsinitramfs.initrd.txt



du -s --human-readable --summarize /usr/src/linux | cut -f1
echo "ZIP size:   `mibsize ${imagepfx}.zip` MiB"
echo "ISO size:   `mibsize ${imagepfx}.iso` MiB"
echo "OVA size:   `mibsize ${imagepfx}.ova` MiB"
GRADM=du -s --human-readable --summarize /usr/src/gradm/ | cut -f1


modinfo -F sig_key ${mod}
modinfo -F sig_hashalgo ${mod}


${kernsrc}/scripts/sign-file ${sighash} ${sb_kmod}.key ${sb_kmod}.der "${mod}"

echo "## ============================================================================= ##"
echo "   [+] Create the initrd image file only if one was not created automatically:		 "
echo "## ============================================================================= ##"
cd /boot
update-initramfs -c -k 3.12.5

echo "## ---------------------------------- ##"
echo "##	For Redhat/Fedora/CentOS:		##"
echo "## ---------------------------------- ##"
dracut /boot/initramfs-3.0.8.img 3.0.8



echo "## =========================================================== ##"
echo "   [+] Install The New Kernel Binary Into The Grub Menu:"
echo "## =========================================================== ##"
update-grub




/usr/sbin/update-initramfs




systemd-­analyze





## ==================================== ##
echo " [+] Compile and install:"
## ==================================== ##
make install
























## ====================================================================== ##
echo " [?] You can also upgrade between 4.x releases by patching"
echo "     Enter the top level directory of the kernel source and execute:"
## ====================================================================== ##
xz -cd ../patch-4.x.xz | patch -p1






echo "## =========================================================================================================== ##"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "	 [+] make rpm-pkg 				|| Build source and binary RPM packages		||"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "	 [+] make binrpm-pkg 			|| Build binary RPM package					||"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "	 [+] make deb-pkg 				|| Builds binary DEB package				||"
echo "## ----------------------------------------------------------------------------------------------------------- ##"
echo "## =========================================================================================================== ##"



make -j5
make -j5 modules



make-kpkg clean

make -kpkg --initrd --append-to-version "grsec1.0" kernel_image




echo "## ========================================= ##"
echo "   [?] This part is gonna take awhile..."
echo "## ========================================= ##"
fakeroot make -j 5 deb-pkg

fakeroot make deb-pkg

make-kpkg --jobs=${NUM_CORES} --initrd --revision=${REVISION} kernel_image kernel_headers




cd ..


echo "## ========================================================================== ##"
echo "				 [?] Install The Hardened Kernel .deb Files "
echo "## ========================================================================== ##"
dpkg -i linux-image-*-grsec_*-*_*.deb
dpkg -i linux-firmware*.deb
dpkg -i linux-headers*.deb
dpkg -i linux-libc*.deb
dpkg -i paxctld*.deb






echo "## ========================================================================== ##"
echo "	 [?] To configure the kernel, we will use make oldconfig "
echo "	     as we want to preserve the existing kernel configuration."
echo "## ========================================================================== ##"



echo "## ========================================================================== ##"
echo "	 [+] The oldconfig mode will move the original .config file "
echo "	     to .config.old and a new .config will be created."
echo "## ========================================================================== ##"
make oldconfig


echo "## ========================================= ##"
echo "			[+] prepare and compile:			 "
echo "## ========================================= ##"




sysctl -a | grep grsec

pluma /etc/sysctl.d/05‐grsecurity.conf

sysctl --load=/etc/sysctl.d/05‐grsecurity.conf






echo "## ===================================================== ##"
echo "    [+] Extract The Gradm tar.gz Into /usr/src/gradm:"
echo "## ===================================================== ##"

tar xzf gradm*.tar.gz




echo "## ========================================================================== ##"
echo "   [+] cd into the Gradm Kernel Module Directory:"
echo "## ========================================================================== ##"

cd gradm


echo "## ========================================================================== ##"
echo "   [+] Patch The Gradm Kernel Module With grsecurity-2.2.0-iptables.patch		  "
echo "## ========================================================================== ##"

patch -p1 < ../grsecurity-2.2.0-iptables.patch 




## ================================================================= ##
## ----------------------- Debug Output ---------------------------- ##
## ================================================================= ##

echo "	patching file extensions/libxt_gradm.c"
echo "	patching file extensions/libxt_gradm.man"
echo "	patching file include/linux/netfilter/xt_gradm.h"

## ================================================================= ##
## ----------------------- Debug Output ---------------------------- ##
## ================================================================= ##



┌─[root@parrot]─[/home/faggot]
└──╼ #cd /usr/src/gradm/


┌─[root@parrot]─[/usr/src/gradm]
└──╼ #ls

## =================================================================================================================== ##
## ------------------------------------ Verbose Kernel Compilation Debugging ----------------------------------------- ##
## =================================================================================================================== ##

COPYRIGHT              gradm_fulllearn.c        gradm_lib.o       gradm_sha256.c         learn_pass1.tab.o
extensions             gradm_fulllearn.o        gradm_misc.c      gradm_sha256.o         learn_pass2.tab.c
fulllearn_pass1.tab.c  gradm_fulllearn_pass1.l  gradm_misc.o      gradm_sym.c            learn_pass2.tab.h
fulllearn_pass1.tab.h  gradm_fulllearn_pass1.y  gradm_nest.c      gradm_sym.o            learn_pass2.tab.o
fulllearn_pass1.tab.o  gradm_fulllearn_pass2.l  gradm_nest.o      gradm.tab.c            lex.fulllearn_pass1.c
fulllearn_pass2.tab.c  gradm_fulllearn_pass2.y  gradm_net.c       gradm.tab.h            lex.fulllearn_pass1.o
fulllearn_pass2.tab.h  gradm_fulllearn_pass3.l  gradm_net.o       gradm.tab.o            lex.fulllearn_pass2.c
fulllearn_pass2.tab.o  gradm_fulllearn_pass3.y  gradm_newlearn.c  gradm.y                lex.fulllearn_pass2.o
fulllearn_pass3.tab.c  gradm_func.h             gradm_newlearn.o  grlearn                lex.fulllearn_pass3.c
fulllearn_pass3.tab.h  gradm_globals.c          gradm_opt.c       grlearn2_config.tab.c  lex.fulllearn_pass3.o
fulllearn_pass3.tab.o  gradm_globals.o          gradm_opt.o       grlearn2_config.tab.h  lex.gradm.c
gradm                  gradm.h                  gradm_pam.c       grlearn2_config.y      lex.gradm.o
gradm.8                gradm_human.c            gradm_parse.c     grlearn.c              lex.grlearn_config.c
gradm_adm.c            gradm_human.o            gradm_parse.o     grlearn_config.l       lex.grlearn_config.o
gradm_adm.o            gradm.l                  gradm_pax.c       grlearn_config.tab.c   lex.learn_pass1.c
gradm_analyze.c        gradm_learn.c            gradm_pax.o       grlearn_config.tab.h   lex.learn_pass1.o
gradm_analyze.o        gradm_learn.o            gradm_pw.c        grlearn_config.tab.o   lex.learn_pass2.c
gradm_arg.c            gradm_learn_pass1.l      gradm_pw.o        grlearn_config.y       lex.learn_pass2.o
gradm_arg.o            gradm_learn_pass1.y      gradm_replace.c   include                LICENSE
gradm_cap.c            gradm_learn_pass2.l      gradm_replace.o   learn_config           Makefile
gradm_cap.o            gradm_learn_pass2.y      gradm_res.c       learn_pass1.tab.c      policy
gradm_defs.h           gradm_lib.c              gradm_res.o       learn_pass1.tab.h      README

## =================================================================================================================== ##
## ------------------------------------ Verbose Kernel Compilation Debugging End ------------------------------------ ##
## =================================================================================================================== ##



┌─[root@parrot]─[/usr/src/gradm]
└──╼ # make

## =================================================================================================================== ##
## ------------------------------------ Verbose Kernel Compilation Debugging ----------------------------------------- ##
## =================================================================================================================== ##

/usr/bin/bison -b gradm -p gradm -d ./gradm.y
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o lex.gradm.o lex.gradm.c
/usr/bin/bison -b learn_pass1 -p learn_pass1 -d ./gradm_learn_pass1.y
/usr/bin/bison -b learn_pass2 -p learn_pass2 -d ./gradm_learn_pass2.y
/usr/bin/bison -b fulllearn_pass1 -p fulllearn_pass1 -d ./gradm_fulllearn_pass1.y
/usr/bin/bison -b fulllearn_pass2 -p fulllearn_pass2 -d ./gradm_fulllearn_pass2.y
/usr/bin/bison -b fulllearn_pass3 -p fulllearn_pass3 -d ./gradm_fulllearn_pass3.y
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o lex.fulllearn_pass1.o lex.fulllearn_pass1.c
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o lex.fulllearn_pass2.o lex.fulllearn_pass2.c
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o lex.fulllearn_pass3.o lex.fulllearn_pass3.c
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o lex.learn_pass1.o lex.learn_pass1.c
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o lex.learn_pass2.o lex.learn_pass2.c
/usr/bin/bison -b grlearn_config -p grlearn_config -d ./grlearn_config.y
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o lex.grlearn_config.o lex.grlearn_config.c
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE -o gradm gradm.tab.o lex.gradm.o learn_pass1.tab.o learn_pass2.tab.o fulllearn_pass1.tab.o fulllearn_pass2.tab.o fulllearn_pass3.tab.o gradm_misc.o gradm_parse.o gradm_arg.o gradm_pw.o gradm_opt.o gradm_cap.o gradm_sha256.o gradm_adm.o gradm_analyze.o gradm_res.o gradm_human.o gradm_learn.o gradm_net.o gradm_nest.o gradm_pax.o gradm_sym.o gradm_newlearn.o gradm_fulllearn.o gradm_lib.o lex.fulllearn_pass1.o lex.fulllearn_pass2.o lex.fulllearn_pass3.o lex.learn_pass1.o lex.learn_pass2.o grlearn_config.tab.o lex.grlearn_config.o gradm_globals.o gradm_replace.o  -pie
Unable to detect PAM headers, disabling PAM support.
/usr/bin/bison -b grlearn2_config -p grlearn2_config -d ./grlearn2_config.y

## =================================================================================================================== ##
## ------------------------------------ Verbose Kernel Compilation Debugging End ------------------------------------ ##
## =================================================================================================================== ##


┌─[✗]─[root@parrot]─[/usr/src/gradm]
└──╼ # make all



## ===================================================================================================================================================== ##
## ----------------------------------------------------------------------------------------------------------------------------------------------------- ##
## ===================================================================================================================================================== ##


/usr/bin/bison -b gradm -p gradm -d ./gradm.y
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o gradm.tab.o gradm.tab.c
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o lex.gradm.o lex.gradm.c
/usr/bin/bison -b learn_pass1 -p learn_pass1 -d ./gradm_learn_pass1.y
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o learn_pass1.tab.o learn_pass1.tab.c
/usr/bin/bison -b learn_pass2 -p learn_pass2 -d ./gradm_learn_pass2.y
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o learn_pass2.tab.o learn_pass2.tab.c
/usr/bin/bison -b fulllearn_pass1 -p fulllearn_pass1 -d ./gradm_fulllearn_pass1.y
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o fulllearn_pass1.tab.o fulllearn_pass1.tab.c
/usr/bin/bison -b fulllearn_pass2 -p fulllearn_pass2 -d ./gradm_fulllearn_pass2.y
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o fulllearn_pass2.tab.o fulllearn_pass2.tab.c
/usr/bin/bison -b fulllearn_pass3 -p fulllearn_pass3 -d ./gradm_fulllearn_pass3.y
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o fulllearn_pass3.tab.o fulllearn_pass3.tab.c
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o lex.fulllearn_pass1.o lex.fulllearn_pass1.c
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o lex.fulllearn_pass2.o lex.fulllearn_pass2.c
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o lex.fulllearn_pass3.o lex.fulllearn_pass3.c
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o lex.learn_pass1.o lex.learn_pass1.c
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o lex.learn_pass2.o lex.learn_pass2.c
/usr/bin/bison -b grlearn_config -p grlearn_config -d ./grlearn_config.y
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o grlearn_config.tab.o grlearn_config.tab.c
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o lex.grlearn_config.o lex.grlearn_config.c
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE -o gradm gradm.tab.o lex.gradm.o learn_pass1.tab.o learn_pass2.tab.o fulllearn_pass1.tab.o fulllearn_pass2.tab.o fulllearn_pass3.tab.o gradm_misc.o gradm_parse.o gradm_arg.o gradm_pw.o gradm_opt.o gradm_cap.o gradm_sha256.o gradm_adm.o gradm_analyze.o gradm_res.o gradm_human.o gradm_learn.o gradm_net.o gradm_nest.o gradm_pax.o gradm_sym.o gradm_newlearn.o gradm_fulllearn.o gradm_lib.o lex.fulllearn_pass1.o lex.fulllearn_pass2.o lex.fulllearn_pass3.o lex.learn_pass1.o lex.learn_pass2.o grlearn_config.tab.o lex.grlearn_config.o gradm_globals.o gradm_replace.o  -pie
Unable to detect PAM headers, disabling PAM support.
/usr/bin/bison -b grlearn2_config -p grlearn2_config -d ./grlearn2_config.y
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE -DIS_GRLEARN -o grlearn grlearn.c gradm_lib.c gradm_globals.c grlearn2_config.tab.c lex.grlearn_config.c  -pie
gradm_lib.c: In function ‘add_to_string_array’:
gradm_lib.c:123:3: warning: to be safe all intermediate pointers in cast from ‘char **’ to ‘const char **’ must be ‘const’ qualified [-Wcast-qual]
  *(const char **)(*array + size) = str;
   ^

## ===================================================================================================================================================== ##
## ----------------------------------------------------------------------------------------------------------------------------------------------------- ##
## ===================================================================================================================================================== ##






┌─[root@parrot]─[/usr/src/gradm]
└──╼ # make install

## =================================================================================================================== ##
## ------------------------------------ Verbose Kernel Compilation Debugging ----------------------------------------- ##
## =================================================================================================================== ##

/usr/bin/bison -b gradm -p gradm -d ./gradm.y
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o gradm.tab.o gradm.tab.c
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o lex.gradm.o lex.gradm.c
/usr/bin/bison -b learn_pass1 -p learn_pass1 -d ./gradm_learn_pass1.y
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o learn_pass1.tab.o learn_pass1.tab.c
/usr/bin/bison -b learn_pass2 -p learn_pass2 -d ./gradm_learn_pass2.y
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o learn_pass2.tab.o learn_pass2.tab.c
/usr/bin/bison -b fulllearn_pass1 -p fulllearn_pass1 -d ./gradm_fulllearn_pass1.y
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o fulllearn_pass1.tab.o fulllearn_pass1.tab.c
/usr/bin/bison -b fulllearn_pass2 -p fulllearn_pass2 -d ./gradm_fulllearn_pass2.y
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o fulllearn_pass2.tab.o fulllearn_pass2.tab.c
/usr/bin/bison -b fulllearn_pass3 -p fulllearn_pass3 -d ./gradm_fulllearn_pass3.y
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o fulllearn_pass3.tab.o fulllearn_pass3.tab.c
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o lex.fulllearn_pass1.o lex.fulllearn_pass1.c
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o lex.fulllearn_pass2.o lex.fulllearn_pass2.c
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o lex.fulllearn_pass3.o lex.fulllearn_pass3.c
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o lex.learn_pass1.o lex.learn_pass1.c
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o lex.learn_pass2.o lex.learn_pass2.c
/usr/bin/bison -b grlearn_config -p grlearn_config -d ./grlearn_config.y
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o grlearn_config.tab.o grlearn_config.tab.c
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE   -c -o lex.grlearn_config.o lex.grlearn_config.c
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE -o gradm gradm.tab.o lex.gradm.o learn_pass1.tab.o learn_pass2.tab.o fulllearn_pass1.tab.o fulllearn_pass2.tab.o fulllearn_pass3.tab.o gradm_misc.o gradm_parse.o gradm_arg.o gradm_pw.o gradm_opt.o gradm_cap.o gradm_sha256.o gradm_adm.o gradm_analyze.o gradm_res.o gradm_human.o gradm_learn.o gradm_net.o gradm_nest.o gradm_pax.o gradm_sym.o gradm_newlearn.o gradm_fulllearn.o gradm_lib.o lex.fulllearn_pass1.o lex.fulllearn_pass2.o lex.fulllearn_pass3.o lex.learn_pass1.o lex.learn_pass2.o grlearn_config.tab.o lex.grlearn_config.o gradm_globals.o gradm_replace.o  -pie
/usr/bin/bison -b grlearn2_config -p grlearn2_config -d ./grlearn2_config.y
/usr/bin/gcc -O2 -fPIE -Wcast-qual -DGRSEC_DIR=\"/etc/grsec\" -D_LARGEFILE64_SOURCE -DIS_GRLEARN -o grlearn grlearn.c gradm_lib.c gradm_globals.c grlearn2_config.tab.c lex.grlearn_config.c  -pie
gradm_lib.c: In function ‘add_to_string_array’:
gradm_lib.c:123:3: warning: to be safe all intermediate pointers in cast from ‘char **’ to ‘const char **’ must be ‘const’ qualified [-Wcast-qual]
  *(const char **)(*array + size) = str;
   ^
Installing gradm...
Installing grlearn...
Installing gradm manpage...
Setting up grsecurity RBAC password
Password: 
Re-enter Password: 
Password written to /etc/grsec/pw.

## =================================================================================================================== ##
## ------------------------------------ Verbose Kernel Compilation Debugging End ------------------------------------ ##
## =================================================================================================================== ##




enable full system learning

gradm -F -L /etc/grsec/learning.logs



echo "## ============================================================================= ##"
echo "	 [+] perform administrative tasks while full system learning is enabled"
echo "	               authenticate to the admin role with:"
echo "## ============================================================================= ##"
gradm -a admin


echo "## ============================================================================================== ##"
echo " [!] Remember to exit your shell or unauthenticate from the admin role"
echo "     when you are done performing administrative tasks."
echo "## ============================================================================================== ##"
gradm -u 


gradm -C


echo "## ============================================================================================== ##"
echo " [?] When you believe you have used your system sufficiently to obtain a good policy"
echo "     let gradm process them and propose roles under /etc/grsec/learning.roles"
echo "## ============================================================================================== ##"
gradm ‐D
gradm ‐F ‐L /etc/grsec/learning.log ‐O /etc/grsec/learning.roles



/etc/grsec/policy 
consists of three types of objects:

Roles: Users and groups on the system

Subjects: Processes and directories

Objects: Files and PaX flags


echo "## ================================================================ ##"
echo "   [+] Audit the /etc/grsec/learning.roles and save it as:" 
echo "       /etc/grsec/policy (mode 0600 ) when you are finished"
echo "## ================================================================ ##"
mv /etc/grsec/learning.roles /etc/grsec/policy
chmod 0600 /etc/grsec/policy



echo "## ================================================================ ##"
echo "   [+] enable the RBAC system with your new learned policy:"
echo "## ================================================================ ##"
gradm ‐E




echo "## ================================================================ ##"
echo "   			[+] Create A Gradm Firefox Policy: 						"
echo "## ================================================================ ##"
echo "## ---------------------------------------------------------------- ##"
echo "   > firefox has read access to the users home folder"
echo "## ---------------------------------------------------------------- ##"
echo "   > read, write, create and destroy files, execute in:"
echo "		> /home/xe1phix/Downloads"
echo "## ---------------------------------------------------------------- ##"
echo "   > Cannot see anything in:"
echo "   	> /home/xe1phix/secrets"
echo "   	> /"
echo "## ---------------------------------------------------------------- ##"
echo "## ================================================================ ##"


# Role: username
subject /usr/lib/firefox/firefox o {
	/												h
	/home/username						r
	/home/username/Downloads	rwxcd
	/home/username/secrets		h
}







LKM - Loadable Kernel Modules

/lib/modules


dkms status





echo "## ============================================================================================== ##"
echo " [!] A list of grsec/PaX Configuration Definitions can be found here:"
echo "## ============================================================================================== ##"
echo "## "
echo "## ----------------------------------------------------------------------------------------------------- ##"
echo "		https://en.wikibooks.org/wiki/Grsecurity/Appendix/Grsecurity_and_PaX_Configuration_Options"
echo "## ----------------------------------------------------------------------------------------------------- ##"





cat /lib/modules/$(uname -r)/build/.config




Grab the kernel version string used in the GRUB bootloader menu:

grep menuentry /boot/grub/grub.cfg | cut -d "'" -f2 | grep "grsec$"


Set the new kernel to boot by default, and reboot:

sed -i "s/^GRUB_DEFAULT=.*$/GRUB_DEFAULT=\"Advanced options for Debian GNU\/Linux>Debian GNU\/Linux, with Linux 4.3.3-grsec\"/" /etc/default/grub
update-grub
grub-reboot "Advanced options for Debian GNU/Linux>Debian GNU/Linux, with Linux 4.3.3-grsec"
shutdown -r now




checkstack




systemctl start paxd
systemctl start paxctld
systemctl status paxctld

chkconfig paxctld on


Flag	Name	Description
P	PAGEEXEC	Refuse code execution on writable pages based on the NX bit (or emulated NX bit)
S	SEGMEXEC	Refuse code execution on writable pages based on the segmentation logic of IA-32
E	EMUTRAMP	Allow known code execution sequences on writable pages that should not cause any harm
M	MPROTECT	Prevent the creation of new executable code to the process address space
R	RANDMMAP	Randomize the stack base to prevent certain stack overflow attacks from being successful
X	RANDEXEC	Randomize the address where the application maps to prevent certain attacks from being exploitable




fix-gnustack - Query or clear the ELF GNU_STACK executable flag
paxctl-ng - Swiss army knife for working with PT_PAX and/or XATTR_PAX flags
pypaxctl - Simple tool to get or set PT_PAX and/or XATTR_PAX flags
revdep-pax - Find mismatching PaX markings between ELF objects and their libraries
migrate-pax - Migrate PaX flags from PT_PAX to XATTR_PAX for all ELF objects on a system
pypax.so - Python module to get or set PT_PAX and/or XATTR_PAX flags
paxmark.sh - A bash script wrapper to paxctl-ng/paxctl/scanelf/setfattr to find any available utility to set PT_PAX and/or XATTR_PAX flags


cat checksec.sh | grep "CONFIG_" | sed 's/.*\(CONFIG_[^=]*\).*/\1/g'



Printed the PaX flags of the process with PID $PID
cat /proc/$PID/status | grep PaX








## ================================================================= ##
## 					Set some PaX flags for GRUB:
## ================================================================= ##
paxctl -Cpm /usr/sbin/grub-probe
paxctl -Cpm /usr/sbin/grub-mkdevicemap
paxctl -Cpm /usr/sbin/grub-install
paxctl -Cpm /usr/bin/grub-script-check
paxctl -Cpm /usr/bin/grub-mount


paxctl -c /usr/bin/python2.7
paxctl -m /usr/bin/python2.7

$ sudo paxctl ‐c /usr/lib/firefox/firefox
$ sudo paxctl ‐m /usr/lib/firefox/firefox
$ sudo paxctl ‐c /usr/lib/firefox/plugin‐container
$ sudo paxctl ‐m /usr/lib/firefox/plugin‐container


"Disabling PaX markings"
# Not necessary for any plugins
paxctl-ng -d /usr/lib/firefox/plugin-container



gpg --homedir=~.gnupg --verify paxctld_1.2.1-1_amd64.{deb.sig,deb}
dpkg -i paxctld_1.2.1-1_amd64.deb
make install-deb
cp paxctld.conf /etc/paxctld.conf
paxctld -d
systemctl enable paxctld
mkdir /boot/grub
update-grub2



update-grub
update-initramfs -k $KVER$KREV -c
update-initramfs -u

shutdown -h now

groupadd -g 9001 grsecproc
groupadd -g 9002 tpeuntrusted
groupadd -g 9003 denysockets




cp 77pax-bites /etc/apt/apt.conf.d/





echo "Following programs are written in a way that executes insecure operations, "
echo "e.g. they rewrite code in runtime (JIT)."
echo "Mempo.org project will aim to remedy this one day e.g. by optionally disabling JIT."
echo ""
echo "Now we will now partially DISABLE the PROTECTIONS for them so they can work until they are fixed:"

setfattr -n user.pax.flags -v "rm" /usr/lib/xulrunner-*/xulrunner-stub 
setfattr -n user.pax.flags -v "rm" /usr/lib/iceweasel/iceweasel # debian 7
setfattr -n user.pax.flags -v "rm" /usr/lib/icedove/icedove-bin
setfattr -n user.pax.flags -v "rm" /usr/lib/icedove/icedove
setfattr -n user.pax.flags -v "rm" /usr/lib/iceowl/iceowl-bin # debian 6

# tricky part is to run this in between upgrade of kernel for reinstalling/updating grub
setfattr -n user.pax.flags -v "m"  /usr/sbin/grub-*
setfattr -n user.pax.flags -v "m"  /usr/sbin/grub-mkdevicemap
setfattr -n user.pax.flags -v "m"  /usr/bin/grub-mount
setfattr -n user.pax.flags -v "m"  /usr/bin/grub-script-check
setfattr -n user.pax.flags -v "m"  /usr/lib/grub/i386-pc/grub-setup

setfattr -n user.pax.flags -v "m"  /usr/lib/libreoffice/program/unopkg.bin
setfattr -n user.pax.flags -v "m" /usr/lib/libreoffice/program/soffice.bin

setfattr -n user.pax.flags -v "m" /usr/lib/valgrind/memcheck-*-linux

# it could be needed to reinstall java before and after, as part of java install process runs java

setfattr -n user.pax.flags -v "m"  /usr/lib/jvm/*/jre/lib/*/*.so  /usr/lib/jvm/*/jre/bin/*  

# to gedit plugins 
setfattr -n user.pax.flags -v rm /usr/bin/gedit  


setfattr -n user.pax.flags -v rm /usr/bin/qtcreator
setfattr -n user.pax.flags -v rm /usr/lib/chromium/*



getfattr ‐n user.pax.flags



setfattr ‐n user.pax.flags ‐v "emr"











## ================================================================= ##
echo "specify which shared libraries they need within
echo "the dynamic information section:"
## ================================================================= ##
readelf -d /bin/bash | grep NEEDED


paxctl -c /usr/bin/vi
paxctl -v /usr/bin/vi


echo "## ================================================================= ##"
echo "		[+] Check Chrome headers:"
echo "## ================================================================= ##"
paxctl -v /opt/google/chrome/chrome
paxctl -v /opt/google/chrome/nacl_helper
paxctl -v /opt/google/chrome/chrome-sandbox 



paxctl -Cm /usr/bin/nodejs


/usr/lib/jvm/java-6-openjdk-amd64/jre/bin/java







--query


--set-execstack


--clear-execstack


execstack -s ~/lib/libfoo.so.1
       will mark ~/lib/libfoo.so.1 as requiring executable stack.
              # execstack -c ~/bin/bar
       will mark ~/bin/bar as not requiring executable stack.
              # execstack -q ~/lib/libfoo.so.1 ~/bin/bar
       will query executable stack marking of the given files.






## ================================================================= ##
## 		To check if a library has executable stack enabled, run:
## ================================================================= ##
execstack -q /usr/lib/libcrypto.so.0.9.8


## ================================================================= ##
## 		query the status of all libraries in your system, run:
## ================================================================= ##
find /lib /usr/lib -name '*.so.*.*.*' | xargs execstack





## ======================================================================================= ##
paxctld -c <config_file> __________	# the default is /etc/paxctld.conf
paxctld -d ________________________ # Make paxctld run as a daemon
paxctld -p <pid_file> _____________ # Specify the pid file to use when running in daemon mode
paxctld -q ________________________ # Enable quiet mode to suppress all syslogs from paxctld
## ======================================================================================= ##









echo "## ======================================================================================= ##"
echo -e "\t\t PaXrat Configuration example:"
echo "## ======================================================================================= ##"



echo "## --------------------------------------------------------------------------------------- ##"

```json
{
  "/usr/lib/iceweasel/iceweasel": {                                                     
    "flags": "pm"
  },                                                                            
  "/usr/lib/iceweasel/plugin-container": {                                                                  
    "flags": "m"
  },
  "/home/user/.local/share/torbrowser/tbb/x86_64/tor-browser_en-US/Browser/firefox": {
    "flags": "pm",
    "nonroot": true
  }
}
```
echo "## --------------------------------------------------------------------------------------- ##"




echo "## ======================================================================================= ##"
echo -e "\t\t Set flags on a single binary"
echo "## ======================================================================================= ##"
paxrat -s pm -b /usr/lib/iceweasel/iceweasel 



echo "## ======================================================================================= ##"
echo -e "\t\t ## Set all flags from a config file:"
echo "## ======================================================================================= ##"
paxrat -c paxrat.conf 

 

echo "## ======================================================================================= ##"
echo -e "\t\t ## Test to make sure the provided config file is valid:"
echo "## ======================================================================================= ##"
sudo paxrat -c paxrat.conf -t


echo "## ======================================================================================= ##"
echo -e "\t\t ## Run in watcher mode:"
echo "## ======================================================================================= ##"
sudo paxrat -c paxrat.conf -w





echo "## ======================================================================================= ##"
echo " +-+-+- PaXrat 
echo "## ======================================================================================= ##"
paxrat -s pm -b /usr/lib/iceweasel/iceweasel ____________ # Set flags on a single binary
paxrat -c paxrat.conf ___________________________________ # Set all flags from a config file
sudo paxrat -c paxrat.conf -t ___________________________ # Test to make sure the provided config file is valid
sudo paxrat -c paxrat.conf -w ___________________________ # Run in watcher mode
echo "## ======================================================================================= ##"










hardening-check --verbose --color --debug
hardening-check --report-functions










┌─[root@parrot]─[/home/xe1phix]
└──╼ #paxtest blackhat


## =================================================================================================================== ##
## ------------------------------------ Verbose Kernel Compilation Debugging ----------------------------------------- ##
## =================================================================================================================== ##

PaXtest - Copyright(c) 2003-2014 by Peter Busser <peter@adamantix.org> and Brad Spengler <spender@grsecurity.net>
Released under the GNU Public Licence version 2 or later

Writing output to /root/paxtest.log
It may take a while for the tests to complete
Test results:
PaXtest - Copyright(c) 2003-2014 by Peter Busser <peter@adamantix.org> and Brad Spengler <spender@grsecurity.net>
Released under the GNU Public Licence version 2 or later

Mode: 1
Blackhat
Kernel: 
Linux parrot 4.8.17-grsec #1 SMP Tue Jan 17 21:53:04 MST 2017 x86_64 GNU/Linux

Relase information: 
Distributor ID:	Parrot
Description:	Parrot Security 3.4 - CyberFrigate
Release:	3.4
Codename:	cyberfrigate
Test results:
Executable anonymous mapping             : Killed
Executable bss                           : Killed
Executable data                          : Killed
Executable heap                          : Killed
Executable stack                         : Killed
Executable shared library bss            : Killed
Executable shared library data           : Killed
Executable anonymous mapping (mprotect)  : Killed
Executable bss (mprotect)                : Killed
Executable data (mprotect)               : Killed
Executable heap (mprotect)               : Killed
Executable stack (mprotect)              : Killed
Executable shared library bss (mprotect) : Killed
Executable shared library data (mprotect): Killed
Writable text segments                   : Killed
Anonymous mapping randomization test     : 28 quality bits (guessed)
Heap randomization test (ET_EXEC)        : 22 quality bits (guessed)
Heap randomization test (PIE)            : 35 quality bits (guessed)
Main executable randomization (ET_EXEC)  : 28 quality bits (guessed)
Main executable randomization (PIE)      : 28 quality bits (guessed)
Shared library randomization test        : 28 quality bits (guessed)
VDSO randomization test                  : 28 quality bits (guessed)
Stack randomization test (SEGMEXEC)      : 35 quality bits (guessed)
Stack randomization test (PAGEEXEC)      : 35 quality bits (guessed)
Arg/env randomization test (SEGMEXEC)    : 39 quality bits (guessed)
Arg/env randomization test (PAGEEXEC)    : 39 quality bits (guessed)
Randomization under memory exhaustion @~0: 28 bits (guessed)
Randomization under memory exhaustion @0 : 28 bits (guessed)
Return to function (strcpy)              : paxtest: return address contains a NULL byte.
Return to function (memcpy)              : Vulnerable
Return to function (strcpy, PIE)         : paxtest: return address contains a NULL byte.
Return to function (memcpy, PIE)         : Vulnerable



## =================================================================================================================== ##
## ------------------------------------ Verbose Kernel Compilation Debugging End ------------------------------------- ##
## =================================================================================================================== ##





## ======================================================================================= ##
gradm -V -L -F ____________________ # Toggle full learning mode
gradm -C __________________________ # Perform  a  check  of the RBAC policy
gradm -R __________________________ # Reload the RBAC system
gradm -E __________________________ # Enable the RBAC system
## ======================================================================================= ##



## ================================================================= ##
echo "perform administrative tasks while full system learning is enabled, 
echo "authenticate to the admin role with:"
## ================================================================= ##
gradm -a admin


## ================================================================= ##
echo "To create a role-based learning log with gradm type:"
## ================================================================= ##
gradm -F -L /etc/grsec/learning.logs -O /etc/grsec/policy


To use the learning mode, activate it using gradm:
gradm ‐F ‐L /etc/grsec/learning.log

gradm ‐F ‐L /etc/grsec/learning.log ‐O /etc/grsec/learning.roles


# and then generate the rules after disabling the system after the 
# learning phase with:
gradm2 -F -L /etc/grsec2/learning.logs -O /etc/grsec2/policy



mv /etc/grsec/learning.roles /etc/grsec/policy
chmod 0600 /etc/grsec/policy





grlearn




## ================================================================= ##
##		 enable learning, enable the system by executing:
## ================================================================= ##
# gradm -L /etc/grsec/learning.logs -E



cat /proc/vmallocinfo | grep bpf

pidof inetd | xargs pspax -p



cat /proc/1/status | grep 'Seccomp:' | cut -b10
cat /proc/self/status | grep NoNewPrivs



readelf -W -l /proc/1/exe | grep 'GNU_STACK'
readelf -W -l /proc/1/exe | grep -q 'RWE'

echo "check for RELRO support"
readelf -l /proc/1/exe | grep -q 'GNU_RELRO'
readelf -d  | grep -q 'BIND_NOW'


echo "check for stack canary support"
readelf -s "$1" 2>/dev/null | grep -q '__stack_chk_fail'

check for PIE support
readelf -h "$1" 2>/dev/null | grep -q 'Type:[[:space:]]*EXEC'
readelf -h "$1" 2>/dev/null | grep -q 'Type:[[:space:]]*DYN'; then
readelf -d /proc/{1,self}/ | grep -q '(DEBUG)'



echo "***function proccheck->RELRO"
readelf -l "$1/exe" 2>/dev/null | grep -q 'Program Headers'; then
readelf -l "$1/exe" 2>/dev/null | grep -q 'GNU_RELRO'; then
readelf -d "$1/exe" 2>/dev/null | grep -q 'BIND_NOW'


check for stack canary support
readelf -s "$1/exe" 2>/dev/null | grep -q 'Symbol table'; then
readelf -s "$1/exe" 2>/dev/null | grep -q '__stack_chk_fail'




cat /proc/1/maps | grep seccomp


cat /boot/config-4.12.0-parrot6-amd64
cat /boot/config-4.11.0-parrot6-amd64
cat /lib/modules/4.12.0-parrot6-amd64/build/.config
cat /lib/modules/4.11.0-parrot6-amd64/build/.config
cat /usr/src/


echo "## ================================================================= ##"
echo "		[+] List The Kernel Configuration Parameters Related To PaX:"
echo "## ================================================================= ##"
cat checksec | grep "CONFIG_" | sed 's/.*\(CONFIG_[^=]*\).*/\1/g'







PAX_NOEXEC: Enforces all segments (except .text) of program as non-executable when loaded in memory.
PAGEEXEC (p/P) - The NX-bit used by hardware CPU to enforce non-executable bit on memory segment
SEGMEXEC (s/S) - The NX-bit used by hardware CPU to enforce non-executable bit on memory segments.
EMUTRAMP (e/E) - Allows emulation of trampolines, even when the memory is marked as non-executable. 
This is normally used by self-modifying code, which is often used in viruses and worms, but can have a legitimate purposes as well.

MPROTECT (m/M) - Prevents changing memory access, creation of anonymous RWX memory and making relro data pages writable.
KERNEXEC: Enforces PAGEEXEC and MPROTECT in the kernel space.

PAX_ASLR - Expands the number of randomized bits of the address space.

RANDUSTACK - Enforces the use of a randomized stack address in every user’s process

RANDMMAP (r/R) - Enforces the use of a randomized base address.

RANDKSTACK - Enforces the use of a randomized stack address in every kernel’s process


USERCOPY:
Makes the kernel enforce the size of heap objects when copied between user and kernel land.

SIZEOVERFLOW - makes kernel recompute function arguments with double integer precision

LATENT_ENTROPY - Makes the kernel generate Entropy during system boots








CONFIG_GRKERNSEC")"
CONFIG_PAX")"
CONFIG_COMPAT_BRK
CONFIG_CC_STACKPROTECTOR
CONFIG_PAX'; then
CONFIG_STRICT_KERNEL_RWX
CONFIG_STRICT_MODULE_RWX
CONFIG_HARDENED_USERCOPY
CONFIG_HARDENED_USERCOPY_PAGESPAN
CONFIG_STRICT_DEVMEM
CONFIG_DEVKMEM
CONFIG_PAX_SIZE_OVERFLOW
CONFIG_DEBUG_STRICT_USER_COPY_CHECKS'; then
CONFIG_DEBUG_STRICT_USER_COPY_CHECKS
CONFIG_PAX_ASLR
CONFIG_ARM_KERNMEM_PERMS
CONFIG_SECURITY_SELINUX
CONFIG_GRKERNSEC
CONFIG_GRKERNSEC_HIGH
CONFIG_GRKERNSEC_MEDIUM
CONFIG_GRKERNSEC_LOW
CONFIG_AUTO
CONFIG_CUSTOM
CONFIG_PAX_KERNEXEC
CONFIG_PAX_NOEXEC
CONFIG_PAX_PAGEEXEC
CONFIG_PAX_MPROTECT
CONFIG_PAX_ASLR
CONFIG_PAX_RANDKSTACK
CONFIG_PAX_RANDUSTACK
CONFIG_PAX_RANDMMAP
CONFIG_PAX_MEMORY_SANITIZE
CONFIG_PAX_MEMORY_STACKLEAK
CONFIG_PAX_MEMORY_UDEREF
CONFIG_PAX_REFCOUNT
CONFIG_PAX_USERCOPY
CONFIG_GRKERNSEC_JIT_HARDEN
CONFIG_BPF_JIT
CONFIG_GRKERNSEC_RAND_THREADSTACK
CONFIG_GRKERNSEC_KMEM
CONFIG_GRKERNSEC_IO
CONFIG_GRKERNSEC_MODHARDEN
CONFIG_MODULES
CONFIG_GRKERNSEC_CHROOT
CONFIG_GRKERNSEC_HARDEN_PTRACE
CONFIG_GRKERNSEC_RANDNET
CONFIG_GRKERNSEC_BLACKHOLE
CONFIG_GRKERNSEC_BRUTE
CONFIG_GRKERNSEC_HIDESYM
CONFIG_GRKERNSEC_SYSCTL

 | grep -qi 'CONFIG_CC_STACKPROTECTOR=

 | grep -qi 'CONFIG_DEBUG_RODATA=y\|CONFIG_STRICT_KERNEL_RWX=
 | grep -qi 'CONFIG_STRICT_MODULE_RWX=y'
 | grep -qi 'CONFIG_HARDENED_USERCOPY=
 | grep -qi 'CONFIG_HARDENED_USERCOPY_PAGESPAN=
 | grep -qi 'CONFIG_STRICT_DEVMEM=
 | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS'
g | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS=y'
 | grep -qi 'CONFIG_RANDOMIZE_BASE=y\|CONFIG_PAX_ASLR=y'

echo "Restrict kernel memory permissions"
 | grep -qi 'CONFIG_ARM_KERNMEM_PERMS=y'



Randomize the address of the kernel image (KASLR) (RANDOMIZE_BASE)

Randomize the kernel memory sections (RANDOMIZE_MEMORY) 



echo "SELinux Enabled?"
 | grep -qi 'CONFIG_SECURITY_SELINUX='


echo "Checkreqprot Enabled?"
cat /sys/fs/selinux/checkreqprot

echo "SELinux Deny Unkown Enabled:"
cat /sys/fs/selinux/deny_unknown


"  Non-executable kernel pages:            " "" "" ""
    if $kconfig | grep -qi 'CONFIG_PAX_KERNEXEC=

"  Non-executable pages:                   " "" "" ""
    if $kconfig | grep -qi 'CONFIG_PAX_NOEXEC=

"  Paging Based Non-executable pages:      " "" "" ""
    if $kconfig | grep -qi 'CONFIG_PAX_PAGEEXEC=


"  Restrict MPROTECT:                      " "" "" ""
    if $kconfig | grep -qi 'CONFIG_PAX_MPROTECT=

"  Address Space Layout Randomization:     " "" "" ""
    if $kconfig | grep -qi 'CONFIG_PAX_ASLR=

"  Randomize Kernel Stack:                 " "" "" ""
    if $kconfig | grep -qi 'CONFIG_PAX_RANDKSTACK=

"  Randomize User Stack:                   " "" "" ""
    if $kconfig | grep -qi 'CONFIG_PAX_RANDUSTACK=

"  Randomize MMAP Stack:                   " "" "" ""
    if $kconfig | grep -qi 'CONFIG_PAX_RANDMMAP=

"  Sanitize freed memory:                  " "" "" ""
    if $kconfig | grep -qi 'CONFIG_PAX_MEMORY_SANITIZE=

"  Sanitize Kernel Stack:                  " "" "" ""
    if $kconfig | grep -qi 'CONFIG_PAX_MEMORY_STACKLEAK=

"  Prevent userspace pointer deref:        " "" "" ""
    if $kconfig | grep -qi 'CONFIG_PAX_MEMORY_UDEREF=

"  Prevent kobject refcount overflow:      " "" "" ""
    if $kconfig | grep -qi 'CONFIG_PAX_REFCOUNT=

"  Bounds check heap object copies:        " "" "" ""
    if $kconfig | grep -qi 'CONFIG_PAX_USERCOPY=

"  JIT Hardening:                          " "" "" ""
    if $kconfig | grep -qi 'CONFIG_GRKERNSEC_JIT_HARDEN=
 | grep -qi 'CONFIG_BPF_JIT=


"  Thread Stack Random Gaps:               " "" "" ""
    if $kconfig | grep -qi 'CONFIG_GRKERNSEC_RAND_THREADSTACK=


"  Disable writing to kmem/mem/port:       " "" "" ""
    if $kconfig | grep -qi 'CONFIG_GRKERNSEC_KMEM=

"  Disable privileged I/O:                 " "" "" ""
    if $kconfig | grep -qi 'CONFIG_GRKERNSEC_IO=

"  Harden module auto-loading:             " "" "" ""
    if $kconfig | grep -qi 'CONFIG_GRKERNSEC_MODHARDEN=

 | grep -qi 'CONFIG_MODULES=

"  Chroot Protection:                      " "" "" ""
    if $kconfig | grep -qi 'CONFIG_GRKERNSEC_CHROOT=


"  Deter ptrace process snooping:          " "" "" ""
    if $kconfig | grep -qi 'CONFIG_GRKERNSEC_HARDEN_PTRACE=

"  Larger Entropy Pools:                   " "" "" ""
    if $kconfig | grep -qi 'CONFIG_GRKERNSEC_RANDNET=

"  TCP/UDP Blackhole:                      " "" "" ""
    if $kconfig | grep -qi 'CONFIG_GRKERNSEC_BLACKHOLE=

"  Deter Exploit Bruteforcing:             " "" "" ""
    if $kconfig | grep -qi 'CONFIG_GRKERNSEC_BRUTE=

"  Hide kernel symbols:                    " "" "" ""
    if $kconfig | grep -qi 'CONFIG_GRKERNSEC_HIDESYM=






"  Pax softmode:                           " "" "" ""
    paxsoft=$(sysctl -b -e kernel.pax.softmode

 | grep -qi 'CONFIG_GRKERNSEC_SYSCTL=


sysctl -b kernel.grsecurity.

audit_chdir audit_gid audit_group audit_mount audit_ptrace chroot_caps chroot_deny_bad_rename chroot_deny_chmod chroot_deny_chroot chroot_deny_fchdir chroot_deny_mknod chroot_deny_mount chroot_deny_pivot chroot_deny_shmat chroot_deny_sysctl chroot_deny_unix chroot_enforce_chdir chroot_execlog chroot_findtask chroot_restrict_nice consistent_setxid deny_new_usb deter_bruteforce disable_priv_io dmesg enforce_symlinksifowner exec_logging fifo_restrictions forkfail_logging grsec_lock harden_ipc harden_ptrace ip_blackhole lastack_retries linking_restrictions ptrace_readexec resource_logging romount_protect rwxmap_logging signal_logging socket_all socket_all_gid socket_client socket_client_gid socket_server socket_server_gid symlinkown_gid timechange_logging harden_tty tpe tpe_gid tpe_invert tpe_restrict_all; do




openssl dgst -sha256 -verify ${PUBKEY_FILE} -signature ${SIG_FILE} ${TMP_FILE}













getrlimit
setrlimit


Changing stack size in Unix-like systems

ulimit -s


sigaction
execve
pthread_create
pthread_attr_setguardsize
posix_memalign
mmap
pthread_attr_init
mprotect





sestatus | grep "SELinux status" | awk '{ print $3}'
sestatus | grep "Current" | awk '{ print $3}'




## =========================================================================== ##
## 		Checksec is a bash script to check the properties of executables 
## 			( PIE, RELRO, PaX, Canaries, ASLR, Fortify Source)
## =========================================================================== ##
## --------------------------------------------------------------------------- ##
## 					http://www.trapkit.de/tools/checksec.html
## --------------------------------------------------------------------------- ##
## =========================================================================== ##





chmod +x checksec.sh


cat checksec.sh | grep "CONFIG_" | sed 's/.*\(CONFIG_[^=]*\).*/\1/g'

checksec.sh --file /bin/ls
checksec.sh --output csv --file /bin/ls
checksec.sh --output xml --file /bin/ls


./checksec.sh --fortify-proc


./checksec.sh --kernel








readelf -l "$1" 2>/dev/null | grep -q 'GNU_RELRO'
readelf -d "$1" 2>/dev/null | grep -q 'BIND_NOW'
readelf -s "$1" 2>/dev/null | grep -q '__stack_chk_fail'
readelf -W -l "$1" 2>/dev/null | grep 'GNU_STACK' | grep -q 'RWE'
readelf -h "$1" 2>/dev/null | grep -q 'Type:[[:space:]]*EXEC'
readelf -h "$1" 2>/dev/null | grep -q 'Type:[[:space:]]*DYN'
readelf -d "$1" 2>/dev/null | grep -q '(DEBUG)'
readelf -d "$1" 2>/dev/null | grep -q 'rpath'
readelf -d "$1" 2>/dev/null | grep -q 'runpath'


readelf -s $FS_libc | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//') )
readelf -s "$1" | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//') )


readelf -l "$1/exe" 2>/dev/null | grep -q 'Program Headers'
readelf -l "$1/exe" 2>/dev/null | grep -q 'GNU_RELRO'
readelf -d "$1/exe" 2>/dev/null | grep -q 'BIND_NOW'
readelf -s "$1/exe" 2>/dev/null | grep -q 'Symbol table'
readelf -s "$1/exe" 2>/dev/null | grep -q '__stack_chk_fail'
readelf -W -l "$1/exe" 2>/dev/null | grep 'GNU_STACK' | grep -q 'RWE'
readelf -h "$1/exe" 2>/dev/null | grep -q 'Type:[[:space:]]*EXEC'
readelf -h "$1/exe" 2>/dev/null | grep -q 'Type:[[:space:]]*DYN'
readelf -d "$1/exe" 2>/dev/null | grep -q '(DEBUG)'

readelf -s "$1/exe" | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//')




partx
query_module
sysctl.d
sysfs
systemd-run-generator
vbutil_kernel





dumpelf
dwarfdump
elfrc
execstack
pthread_attr_getstack
pthread_attr_setstack
Devel::StackTrace
debug_object_init_on_stack




elfedit
scanelf
patchelf
pspax
paxctl
paxctld
paxrat






echo "## ======================================================================================= ##"
echo -e "\t\t\t[•] M Represents :[Enabled]: flags"
echo -e "\t\t\t[•] m Represents :[Disabled flags"
echo "## ======================================================================================= ##"



“/home/user/.local/share/torbrowser/tbb/x86_64/tor-browser_en-US/Browser/firefox”


echo "<+-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-+>"
echo -e "\t\t\t\t[+] :[PaX]: flags"
echo "<+-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-+>"
echo "## ===================================================== ##"
echo -e "\t\t[•]  P/p: Enable/disable PAGEXEC"
echo -e "\t\t[•]  E/e: Enable/disable EMUTRAMP"
echo -e "\t\t[•]  M/m: Enable/disable MPROTECT"
echo -e "\t\t[•]  R/r: Enable/disable RANDMAP"
echo -e "\t\t[•]  X/x: Enable/disable RANDEXEC"
echo -e "\t\t[•]  S/x: Enable/disable SEGMEXEC"
echo "## ===================================================== ##"




echo "## ======================================================================================= ##"
echo -e "\t\t[?] A detailed description of these flags can be found on the following page:"
echo "       ## https://en.wikibooks.org/wiki/Grsecurity/Appendix/PaX_Flags"
echo "## ======================================================================================= ##"




echo "## ======================================================================================= ##"
echo -e "\t\t[?] :[PaX flags must be re-applied after any configuration changes"
echo "## ======================================================================================= ##"



echo "## ======================================================================================= ##"
echo -e "\t\t[?] :[PaX includes other memory protection and control flow integrity features so that it is more difficult"
echo -e "\t\t    for attackers to exploit memory corruption vulnerabilities in applications and the kernel."
echo "## ======================================================================================= ##"



echo "## ======================================================================================= ##"
echo -e "\t\t[?] :[Paxrat configuration files are written in JSON."
echo -e "\t\t    And They are stored in the following directory:"
echo "## ======================================================================================= ##"


echo -e "\t\t[?] :[PaxRat Configuration Directory: /etc/paxrat/"
echo -e "\t\t[?] :[PaxRat Configuration File: /etc/paxrat/paxrat.conf"

PAXRATCONFDIR="/etc/paxrat"
PAXRATCONF="/etc/paxrat/paxrat.conf"



echo "## ======================================================================================= ##"
echo -e "\t\t[+] snippet of a :[PaX flag]: configuration for Tor Browser"
echo "## ======================================================================================= ##"



"/home/user/.local/share/torbrowser/tbb/x86_64/tor-browser_en-US/Browser/firefox":
{
	"flags": "m",
	"nonroot": true
}







gradm



# To learn on a given role, add l to the role mode
# For both of these, to enable learning, enable the system like:
# gradm2 -L /etc/grsec2/learning.logs -E
# and then generate the rules after disabling the system after the 
# learning phase with:
# gradm2 -L /etc/grsec2/learning.logs -O /etc/grsec2/policy
# To use full system learning, enable the system like:
# gradm2 -F -L /etc/grsec2/learning.logs
# and then generate the rules after disabling the system after the 
# learning phase with:
# gradm2 -F -L /etc/grsec2/learning.logs -O /etc/grsec2/policy


# capability auditing / log suppression
# use of a capability can be audited by adding "audit" to the line, eg:
# +CAP_SYS_RAWIO audit
# log suppression for denial of a capbility can be done by adding "suppress":
# -CAP_SYS_RAWIO suppress


grlearn







pspax - list ELF/PaX information about running processes

--all



chpax

scanelf
paxctl


dumpelf --verbose

elfedit - Update the ELF header of ELF files.

SYNOPSIS
       elfedit [--input-mach=machine]
               [--input-type=type]
               [--input-osabi=osabi]
               --output-mach=machine
               --output-type=type
               --output-osabi=osabi

gold - The GNU ELF linker






paxctld.confqq
getfattr ‐n user.pax.flags /usr/bin/python3.2
setfattr ‐n user.pax.flags ‐v P /usr/bin/python3.2
root # getfattr ‐n user.pax.flags /usr/bin/python3.2
























gnutls_openpgp_crt_verify_self

gnutls_openpgp_crt_t key
                   the structure that holds the key.

unsigned int * verify
                   will hold the key verification output.

DESCRIPTION
       Verifies  the self signature in the key.  The key verification output will be put in  verify and will be one or
       more of the gnutls_certificate_status_t enumerated elements bitwise or'd.






vdso
gold
gtscheck
ld.gold
pthread_self



## ================================================================= ##
echo "Systemd is a  debate between most linux admins for several reasons:"
## ================================================================= ##

## ================================================================= ##
echo "The Good attributes:"
## ================================================================= ##
echo "1). The previous init.d ecosystem was occasionally a rough patchwork"


## ================================================================= ##
echo "The bad Attributes:"
## ================================================================= ##
echo "1). Systemd is a truly behemoth of a set of programs."  
echo "2). With automation comes a relincwishing of administrative control. "
echo "	  And for a linux admin... Thats surely a way to piss off hackers."


## ================================================================= ##
echo "The ugly Attributes:"
## ================================================================= ##
echo "With large code, a need for attentive bug hunting "
echo "and patching seems like it would be self explanatory..."

echo "1). Apparently not for Redhat, they're too busy sucking microsofts dick to maintain the code."

echo "3). Which is a huuuge problem because systemd is now defaultly used "
echo "	  to construct almost all flavors of linux now..."



## ================================================================= ##
echo "soo... now we are dependant upon a very large.. BUGGY!! UNMAINTAINED! "
echo "Rudamentery fundation. This is why linus has publically shamed redhat over and over"
echo "Hopefully a new alternative will emerge and save us all."
## ================================================================= ##


## ================================================================= ##
echo "In the meantime... An experienced linux admin would be wise enough"
echo "To analyize hidden functions and processes."
echo "Know Your Enemy Well My Friends.."
## ================================================================= ##



systemd-analyze dump

## ================================================================= ##
Examining the initramfs contents
## ================================================================= ##



## ================================================================= ##
echo "unpack the contents of the initramfs into the current directory."
## ================================================================= ##
zcat /boot/initrd.img-3.2.0-2-686-pae | cpio -i


## ================================================================= ##
list the contents of an initramfs using the cpio -t option or the command
## ================================================================= ##
lsinitramfs /boot/initrd.img-*


grep -w init_task /boot/System.map-



dpkg-reconfigure linux-image-



## ================================================================= ##
echo "Lets take a look at the initrd image and its hidden systemd agenda:"
## ================================================================= ##
strings /sbin/init | grep -i systemd

/lib/modules/`uname -r`/vmlinux or /usr/lib/debug/lib64/modules/`uname -r`/vmlinux


readelf -h vmlinux




getfacl 




echo " Granting an additional user read access:"
setfacl -m u:lisa:r file

echo " Revoking write access from all groups and all named "
echo " users  (using  the  effective  rights mask):"
setfacl -m m::rx file

echo " Removing a named group entry from a file's ACL:"
setfacl -x g:staff file

echo "Copying the ACL of one file to another:"
getfacl file1 | setfacl --set-file=- file2

echo "Copying the access ACL into the Default ACL:"
getfacl --access dir | setfacl -d -M- dir











echo "## ================================================================= ##"
echo "		[+] List The Kernel Configuration Parameters Related To PaX:"
echo "## ================================================================= ##"



        /boot/System.map
        /System.map
        /usr/src/linux/System.map

System.map has versioning information

klogd intelligently searches for the correct map file. 
For instance, suppose you're running kernel 2.4.18, 
and the associated map file is /boot/System.map. 
You now compile a new kernel 2.5.1 in the tree /usr/src/linux. 
During the compiling process, 
the file /usr/src/linux/System.map is created. 
When you boot your new kernel, 
klogd will first look at /boot/System.map, 
determine its not the correct map file for the booting kernel, 
then look at /usr/src/linux/System.map, 
determine that it is the correct map file for the booting kernel 
and start reading the symbols.




    A few nota benes:

        Somewhere during the 2.5.x series, the Linux kernel started to untar into linux-version, 
rather than just linux 
(show of hands -- how many people have been waiting for this to happen?). 
I don't know if klogd has been modified to search in /usr/src/linux-version/System.map yet. 
TODO: Look at the klogd source. If someone beats me to it, please e-mail me and let me know if klogd has been modified to look in the new directory name for the linux source code.
        The manpage doesn't tell the whole the story. Look at this:

strace -f /sbin/klogd | grep 'System.map'

echo "## 31208 open("/boot/System.map-2.4.18", O_RDONLY|O_LARGEFILE) = 2"                   

Apparently, not only does klogd look for the correct version of the map in the 3 klogd search directories, 
but klogd also knows to look for the name "System.map" followed by "-kernelversion", 
like System.map-2.4.18. This is undocumented feature of klogd.

A few drivers will need System.map to resolve symbols 
(since they're linked against the kernel headers instead of, say, glibc). 
They will not work correctly without the System.map created for the particular kernel you're currently running. 
This is NOT the same thing as a module not loading because of a kernel version mismatch. 
That has to do with the kernel version, 
not the kernel symbol table which changes between kernels of the same version!



What else uses the System.map?

strace lsof 2>&1 1> /dev/null | grep System
readlink("/proc/22711/fd/4", "/boot/System.map-2.4.18", 4095) = 23


strace ps 2>&1 1> /dev/null | grep System
open("/boot/System.map-2.4.18", O_RDONLY|O_NONBLOCK|O_NOCTTY) = 6
            












## ================================================================================== ##
echo "References:"
## ================================================================================== ##



## ================================================================================== ##
echo "This process is really well documented here:"
echo "This guide is for VM's but most of it applies to host machines, as I will demonstrate:"
## ================================================================================== ##
## -------------------------------------------------------------------------------------------- ##
echo "https://www.whonix.org/wiki/Grsecurity"
## -------------------------------------------------------------------------------------------- ##



## ================================================================================== ##
echo "Another great guide is insanitybits:"
## ================================================================================== ##
## -------------------------------------------------------------------------------------------- ##
echo "http://www.insanitybit.com/2012/05/31/compile-and-patch-your-own-secure-linux-kernel-with-pax-and-grsecurity/"
## -------------------------------------------------------------------------------------------- ##


## ----------------------------------------------------------------------------------------------------------------------- ##


https://sks-keyservers.net/overview-of-pools.php
https://sks-keyservers.net/sks-keyservers.netCA.pem
https://sks-keyservers.net/sks-keyservers.netCA.pem.asc
https://sks-keyservers.net/ca/crl.pem
http://pool.sks-keyservers.net:11371/pks/lookup?op=vindex&search=0x94CBAFDD30345109561835AA0B7F8B60E3EDFAE3
hkp://jirk5u4osbsr34t5.onion 
https://kernel.org/category/signatures.html
https://grsecurity.net/download.php
https://grsecurity.net/~spender/?C=M;O=D

https://en.wikibooks.org/wiki/Grsecurity/Configuring_and_Installing_grsecurity
https://en.wikibooks.org/wiki/Grsecurity/Additional_Utilities
https://en.wikibooks.org/wiki/Grsecurity/The_RBAC_System
## ----------------------------------------------------------------------------------------------------------------------- ##



